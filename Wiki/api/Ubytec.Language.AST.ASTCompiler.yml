### YamlMime:ManagedReference
items:
- uid: Ubytec.Language.AST.ASTCompiler
  commentId: T:Ubytec.Language.AST.ASTCompiler
  id: ASTCompiler
  parent: Ubytec.Language.AST
  children:
  - Ubytec.Language.AST.ASTCompiler.BuildSyntaxTree(Ubytec.Language.Syntax.Model.SyntaxTree,Ubytec.Language.Operations.Interfaces.IOpCode,System.Collections.Generic.List{Ubytec.Language.Syntax.Model.SyntaxToken})
  - Ubytec.Language.AST.ASTCompiler.CompileAST(Ubytec.Language.Syntax.Model.SyntaxTree)
  - Ubytec.Language.AST.ASTCompiler.CompileBlockNode(Ubytec.Language.Syntax.Model.SyntaxSentence,Ubytec.Language.Syntax.Model.SyntaxNode,Ubytec.Language.Syntax.Scopes.CompilationScopes)
  - Ubytec.Language.AST.ASTCompiler.CompileSentence(Ubytec.Language.Syntax.Model.SyntaxSentence,Ubytec.Language.Syntax.Scopes.CompilationScopes)
  - Ubytec.Language.AST.ASTCompiler.CompileSyntax(Ubytec.Language.Operations.Interfaces.IOpCode[],Ubytec.Language.Syntax.Model.SyntaxToken[])
  - Ubytec.Language.AST.ASTCompiler.InheritVariables(Ubytec.Language.Operations.Interfaces.IOpVariableScope,Ubytec.Language.Operations.Interfaces.IOpVariableScope)
  - Ubytec.Language.AST.ASTCompiler.MergeVariables(Ubytec.Language.Operations.Interfaces.IBlockOpCode,Ubytec.Language.Operations.CoreOperations.VAR)
  - Ubytec.Language.AST.ASTCompiler.OpcodeMap
  - Ubytec.Language.AST.ASTCompiler.Parse(Ubytec.Language.Syntax.Model.SyntaxToken[])
  - Ubytec.Language.AST.ASTCompiler.ProcessOperand(Ubytec.Language.Syntax.Model.SyntaxToken,System.Collections.Generic.Queue{System.ValueType})
  langs:
  - csharp
  - vb
  name: ASTCompiler
  nameWithType: ASTCompiler
  fullName: Ubytec.Language.AST.ASTCompiler
  type: Class
  source:
    remote:
      path: Ubytec/Language/AST/ASTCompiler.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: ASTCompiler
    path: ../Ubytec/Language/AST/ASTCompiler.cs
    startLine: 29
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.AST
  summary: >-
    Provides methods to parse Ubytec source tokens into low-level opcodes,

    build a hierarchical abstract syntax tree (<xref href="Ubytec.Language.Syntax.Model.SyntaxTree" data-throw-if-not-resolved="false"></xref>),

    and emit NASM assembly code from that tree.
  remarks: >-
    The <xref href="Ubytec.Language.AST.ASTCompiler" data-throw-if-not-resolved="false"></xref> is split across partial definitions:

    - Parsing and opcode generation (<xref href="Ubytec.Language.AST.ASTCompiler.Parse(Ubytec.Language.Syntax.Model.SyntaxToken%5b%5d)" data-throw-if-not-resolved="false"></xref>).

    - Syntax tree construction (<xref href="Ubytec.Language.AST.ASTCompiler.CompileSyntax(Ubytec.Language.Operations.Interfaces.IOpCode%5b%5d%2cUbytec.Language.Syntax.Model.SyntaxToken%5b%5d)" data-throw-if-not-resolved="false"></xref> and <xref href="Ubytec.Language.AST.ASTCompiler.BuildSyntaxTree(Ubytec.Language.Syntax.Model.SyntaxTree%2cUbytec.Language.Operations.Interfaces.IOpCode%2cSystem.Collections.Generic.List%7bUbytec.Language.Syntax.Model.SyntaxToken%7d)" data-throw-if-not-resolved="false"></xref>).

    - Assembly code emission (<xref href="Ubytec.Language.AST.ASTCompiler.CompileAST(Ubytec.Language.Syntax.Model.SyntaxTree)" data-throw-if-not-resolved="false"></xref>, <xref href="Ubytec.Language.AST.ASTCompiler.CompileSentence(Ubytec.Language.Syntax.Model.SyntaxSentence%2cUbytec.Language.Syntax.Scopes.CompilationScopes)" data-throw-if-not-resolved="false"></xref>, <xref href="Ubytec.Language.AST.ASTCompiler.CompileBlockNode(Ubytec.Language.Syntax.Model.SyntaxSentence%2cUbytec.Language.Syntax.Model.SyntaxNode%2cUbytec.Language.Syntax.Scopes.CompilationScopes)" data-throw-if-not-resolved="false"></xref>).

    Errors encountered during tree construction are captured in <xref href="Ubytec.Language.AST.ASTCompiler.CompileSyntaxError" data-throw-if-not-resolved="false"></xref> records.
  example: []
  syntax:
    content: public static class ASTCompiler
    content.vb: Public Module ASTCompiler
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Ubytec.Language.AST.ASTCompiler.OpcodeMap
  commentId: F:Ubytec.Language.AST.ASTCompiler.OpcodeMap
  id: OpcodeMap
  parent: Ubytec.Language.AST.ASTCompiler
  langs:
  - csharp
  - vb
  name: OpcodeMap
  nameWithType: ASTCompiler.OpcodeMap
  fullName: Ubytec.Language.AST.ASTCompiler.OpcodeMap
  type: Field
  source:
    remote:
      path: Ubytec/Language/AST/ASTCompiler.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: OpcodeMap
    path: ../Ubytec/Language/AST/ASTCompiler.cs
    startLine: 38
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.AST
  summary: Maps each opcode name to its corresponding byte value for instruction encoding.
  remarks: >-
    The keys are the string names of the operations (e.g., <code>nameof(TRAP)</code>, <code>"EQ"</code>),

    and the values are the byte codes used in the Ubytec instruction set.
  example: []
  syntax:
    content: private static readonly Dictionary<string, byte> OpcodeMap
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Byte}
    content.vb: Private Shared ReadOnly OpcodeMap As Dictionary(Of String, Byte)
- uid: Ubytec.Language.AST.ASTCompiler.Parse(Ubytec.Language.Syntax.Model.SyntaxToken[])
  commentId: M:Ubytec.Language.AST.ASTCompiler.Parse(Ubytec.Language.Syntax.Model.SyntaxToken[])
  id: Parse(Ubytec.Language.Syntax.Model.SyntaxToken[])
  parent: Ubytec.Language.AST.ASTCompiler
  langs:
  - csharp
  - vb
  name: Parse(SyntaxToken[])
  nameWithType: ASTCompiler.Parse(SyntaxToken[])
  fullName: Ubytec.Language.AST.ASTCompiler.Parse(Ubytec.Language.Syntax.Model.SyntaxToken[])
  type: Method
  source:
    remote:
      path: Ubytec/Language/AST/ASTCompiler.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: Parse
    path: ../Ubytec/Language/AST/ASTCompiler.cs
    startLine: 121
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.AST
  summary: >-
    Parses a sequence of <xref href="Ubytec.Language.Syntax.Model.SyntaxToken" data-throw-if-not-resolved="false"></xref> instances into low-level <xref href="Ubytec.Language.Operations.Interfaces.IOpCode" data-throw-if-not-resolved="false"></xref> instructions.

    <p>Tokenizes each source line, builds opcodes, and manages nested block structures

    (e.g., BLOCK, IF, ELSE, LOOP, WHILE, SWITCH) using a stack-based approach.</p>
  example: []
  syntax:
    content: public static IOpCode[] Parse(SyntaxToken[] code)
    parameters:
    - id: code
      type: Ubytec.Language.Syntax.Model.SyntaxToken[]
      description: An array of <xref href="Ubytec.Language.Syntax.Model.SyntaxToken" data-throw-if-not-resolved="false"></xref> objects containing the lexical tokens for each source line.
    return:
      type: Ubytec.Language.Operations.Interfaces.IOpCode[]
      description: >-
        An array of <xref href="Ubytec.Language.Operations.Interfaces.IOpCode" data-throw-if-not-resolved="false"></xref> representing the parsed instructions,

        with block contexts correctly nested.
    content.vb: Public Shared Function Parse(code As SyntaxToken()) As IOpCode()
  overload: Ubytec.Language.AST.ASTCompiler.Parse*
  nameWithType.vb: ASTCompiler.Parse(SyntaxToken())
  fullName.vb: Ubytec.Language.AST.ASTCompiler.Parse(Ubytec.Language.Syntax.Model.SyntaxToken())
  name.vb: Parse(SyntaxToken())
- uid: Ubytec.Language.AST.ASTCompiler.ProcessOperand(Ubytec.Language.Syntax.Model.SyntaxToken,System.Collections.Generic.Queue{System.ValueType})
  commentId: M:Ubytec.Language.AST.ASTCompiler.ProcessOperand(Ubytec.Language.Syntax.Model.SyntaxToken,System.Collections.Generic.Queue{System.ValueType})
  id: ProcessOperand(Ubytec.Language.Syntax.Model.SyntaxToken,System.Collections.Generic.Queue{System.ValueType})
  parent: Ubytec.Language.AST.ASTCompiler
  langs:
  - csharp
  - vb
  name: ProcessOperand(SyntaxToken, Queue<ValueType>)
  nameWithType: ASTCompiler.ProcessOperand(SyntaxToken, Queue<ValueType>)
  fullName: Ubytec.Language.AST.ASTCompiler.ProcessOperand(Ubytec.Language.Syntax.Model.SyntaxToken, System.Collections.Generic.Queue<System.ValueType>)
  type: Method
  source:
    remote:
      path: Ubytec/Language/AST/ASTCompiler.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: ProcessOperand
    path: ../Ubytec/Language/AST/ASTCompiler.cs
    startLine: 347
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.AST
  summary: >-
    Processes a single operand token, classifying it (numeric literal, type token, operator, etc.)

    and enqueues the corresponding value(s) into the instruction operand queue.
  example: []
  syntax:
    content: private static void ProcessOperand(SyntaxToken token, Queue<ValueType> instructionAndOperands)
    parameters:
    - id: token
      type: Ubytec.Language.Syntax.Model.SyntaxToken
      description: >-
        The <xref href="Ubytec.Language.Syntax.Model.SyntaxToken" data-throw-if-not-resolved="false"></xref> representing the operand to process

        (with source text and scope metadata).
    - id: instructionAndOperands
      type: System.Collections.Generic.Queue{System.ValueType}
      description: >-
        A <xref href="System.Collections.Generic.Queue%601" data-throw-if-not-resolved="false"></xref> into which parsed operand values are enqueued

        for subsequent opcode creation.
    content.vb: Private Shared Sub ProcessOperand(token As SyntaxToken, instructionAndOperands As Queue(Of ValueType))
  overload: Ubytec.Language.AST.ASTCompiler.ProcessOperand*
  exceptions:
  - type: Ubytec.Language.Exceptions.IlegalTokenException
    commentId: T:Ubytec.Language.Exceptions.IlegalTokenException
    description: Thrown if the token is recognized as an illegal or invalid operand (e.g., unsupported symbol).
  - type: Ubytec.Language.Exceptions.SyntaxException
    commentId: T:Ubytec.Language.Exceptions.SyntaxException
    description: Thrown if an error occurs during parsing of a valid token scope (e.g., invalid numeric format).
  nameWithType.vb: ASTCompiler.ProcessOperand(SyntaxToken, Queue(Of ValueType))
  fullName.vb: Ubytec.Language.AST.ASTCompiler.ProcessOperand(Ubytec.Language.Syntax.Model.SyntaxToken, System.Collections.Generic.Queue(Of System.ValueType))
  name.vb: ProcessOperand(SyntaxToken, Queue(Of ValueType))
- uid: Ubytec.Language.AST.ASTCompiler.InheritVariables(Ubytec.Language.Operations.Interfaces.IOpVariableScope,Ubytec.Language.Operations.Interfaces.IOpVariableScope)
  commentId: M:Ubytec.Language.AST.ASTCompiler.InheritVariables(Ubytec.Language.Operations.Interfaces.IOpVariableScope,Ubytec.Language.Operations.Interfaces.IOpVariableScope)
  id: InheritVariables(Ubytec.Language.Operations.Interfaces.IOpVariableScope,Ubytec.Language.Operations.Interfaces.IOpVariableScope)
  parent: Ubytec.Language.AST.ASTCompiler
  langs:
  - csharp
  - vb
  name: InheritVariables(IOpVariableScope?, IOpVariableScope)
  nameWithType: ASTCompiler.InheritVariables(IOpVariableScope?, IOpVariableScope)
  fullName: Ubytec.Language.AST.ASTCompiler.InheritVariables(Ubytec.Language.Operations.Interfaces.IOpVariableScope?, Ubytec.Language.Operations.Interfaces.IOpVariableScope)
  type: Method
  source:
    remote:
      path: Ubytec/Language/AST/ASTCompiler.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: InheritVariables
    path: ../Ubytec/Language/AST/ASTCompiler.cs
    startLine: 558
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.AST
  summary: >-
    Inherits variables from a parent opCode (e.g., a block or IF) 

    into the child opCode so that they share the same variable context.
  example: []
  syntax:
    content: private static void InheritVariables(IOpVariableScope? parent, IOpVariableScope child)
    parameters:
    - id: parent
      type: Ubytec.Language.Operations.Interfaces.IOpVariableScope
      description: The parent opCode holding the variable list.
    - id: child
      type: Ubytec.Language.Operations.Interfaces.IOpVariableScope
      description: The child opCode to which the variables will be added.
    content.vb: Private Shared Sub InheritVariables(parent As IOpVariableScope, child As IOpVariableScope)
  overload: Ubytec.Language.AST.ASTCompiler.InheritVariables*
  nameWithType.vb: ASTCompiler.InheritVariables(IOpVariableScope, IOpVariableScope)
  fullName.vb: Ubytec.Language.AST.ASTCompiler.InheritVariables(Ubytec.Language.Operations.Interfaces.IOpVariableScope, Ubytec.Language.Operations.Interfaces.IOpVariableScope)
  name.vb: InheritVariables(IOpVariableScope, IOpVariableScope)
- uid: Ubytec.Language.AST.ASTCompiler.MergeVariables(Ubytec.Language.Operations.Interfaces.IBlockOpCode,Ubytec.Language.Operations.CoreOperations.VAR)
  commentId: M:Ubytec.Language.AST.ASTCompiler.MergeVariables(Ubytec.Language.Operations.Interfaces.IBlockOpCode,Ubytec.Language.Operations.CoreOperations.VAR)
  id: MergeVariables(Ubytec.Language.Operations.Interfaces.IBlockOpCode,Ubytec.Language.Operations.CoreOperations.VAR)
  parent: Ubytec.Language.AST.ASTCompiler
  langs:
  - csharp
  - vb
  name: MergeVariables(IBlockOpCode, VAR)
  nameWithType: ASTCompiler.MergeVariables(IBlockOpCode, CoreOperations.VAR)
  fullName: Ubytec.Language.AST.ASTCompiler.MergeVariables(Ubytec.Language.Operations.Interfaces.IBlockOpCode, Ubytec.Language.Operations.CoreOperations.VAR)
  type: Method
  source:
    remote:
      path: Ubytec/Language/AST/ASTCompiler.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: MergeVariables
    path: ../Ubytec/Language/AST/ASTCompiler.cs
    startLine: 572
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.AST
  summary: >-
    Merges the declared variable (from a VAR instruction) into the 

    variable list of the current block-like opCode (BLOCK, IF, LOOP, etc.).

    Ensures each block maintains a record of variables declared in its scope.
  example: []
  syntax:
    content: private static void MergeVariables(IBlockOpCode block, CoreOperations.VAR varOp)
    parameters:
    - id: block
      type: Ubytec.Language.Operations.Interfaces.IBlockOpCode
      description: The block opCode (e.g., BLOCK, IF, LOOP).
    - id: varOp
      type: Ubytec.Language.Operations.CoreOperations.VAR
      description: The VAR instruction that contains the newly declared variable.
    content.vb: Private Shared Sub MergeVariables(block As IBlockOpCode, varOp As CoreOperations.VAR)
  overload: Ubytec.Language.AST.ASTCompiler.MergeVariables*
- uid: Ubytec.Language.AST.ASTCompiler.CompileSyntax(Ubytec.Language.Operations.Interfaces.IOpCode[],Ubytec.Language.Syntax.Model.SyntaxToken[])
  commentId: M:Ubytec.Language.AST.ASTCompiler.CompileSyntax(Ubytec.Language.Operations.Interfaces.IOpCode[],Ubytec.Language.Syntax.Model.SyntaxToken[])
  id: CompileSyntax(Ubytec.Language.Operations.Interfaces.IOpCode[],Ubytec.Language.Syntax.Model.SyntaxToken[])
  parent: Ubytec.Language.AST.ASTCompiler
  langs:
  - csharp
  - vb
  name: CompileSyntax(IOpCode[], SyntaxToken[])
  nameWithType: ASTCompiler.CompileSyntax(IOpCode[], SyntaxToken[])
  fullName: Ubytec.Language.AST.ASTCompiler.CompileSyntax(Ubytec.Language.Operations.Interfaces.IOpCode[], Ubytec.Language.Syntax.Model.SyntaxToken[])
  type: Method
  source:
    remote:
      path: Ubytec/Language/AST/ASTCompiler.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: CompileSyntax
    path: ../Ubytec/Language/AST/ASTCompiler.cs
    startLine: 599
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.AST
  summary: >-
    Builds a <xref href="Ubytec.Language.Syntax.Model.SyntaxTree" data-throw-if-not-resolved="false"></xref> from the provided opCodes and tokens.

    <p>Assumes each row of tokens corresponds to one instruction and groups tokens by their line number.</p>

    <p>Inserts nodes into the tree based on the structure of block-level opCodes

    (e.g., BLOCK, IF, ELSE, LOOP, WHILE, SWITCH).</p>
  example: []
  syntax:
    content: public static (SyntaxTree tree, List<ASTCompiler.CompileSyntaxError> errors) CompileSyntax(IOpCode[] opCodes, SyntaxToken[] tokens)
    parameters:
    - id: opCodes
      type: Ubytec.Language.Operations.Interfaces.IOpCode[]
      description: An array of <xref href="Ubytec.Language.Operations.Interfaces.IOpCode" data-throw-if-not-resolved="false"></xref> instances representing the parsed instructions.
    - id: tokens
      type: Ubytec.Language.Syntax.Model.SyntaxToken[]
      description: >-
        An array of <xref href="Ubytec.Language.Syntax.Model.SyntaxToken" data-throw-if-not-resolved="false"></xref> objects containing lexical details

        (operands, symbols, etc.). May include more tokens than opCodes due to extra operands.
    return:
      type: System.ValueTuple{Ubytec.Language.Syntax.Model.SyntaxTree,System.Collections.Generic.List{Ubytec.Language.AST.ASTCompiler.CompileSyntaxError}}
      description: >-
        A tuple of:

        - <xref href="Ubytec.Language.Syntax.Model.SyntaxTree" data-throw-if-not-resolved="false"></xref>: the root of the constructed abstract syntax tree.

        - <xref href="System.Collections.Generic.List%601" data-throw-if-not-resolved="false"></xref>: a list of errors encountered during tree building.
    content.vb: Public Shared Function CompileSyntax(opCodes As IOpCode(), tokens As SyntaxToken()) As (tree As SyntaxTree, errors As List(Of ASTCompiler.CompileSyntaxError))
  overload: Ubytec.Language.AST.ASTCompiler.CompileSyntax*
  nameWithType.vb: ASTCompiler.CompileSyntax(IOpCode(), SyntaxToken())
  fullName.vb: Ubytec.Language.AST.ASTCompiler.CompileSyntax(Ubytec.Language.Operations.Interfaces.IOpCode(), Ubytec.Language.Syntax.Model.SyntaxToken())
  name.vb: CompileSyntax(IOpCode(), SyntaxToken())
- uid: Ubytec.Language.AST.ASTCompiler.BuildSyntaxTree(Ubytec.Language.Syntax.Model.SyntaxTree,Ubytec.Language.Operations.Interfaces.IOpCode,System.Collections.Generic.List{Ubytec.Language.Syntax.Model.SyntaxToken})
  commentId: M:Ubytec.Language.AST.ASTCompiler.BuildSyntaxTree(Ubytec.Language.Syntax.Model.SyntaxTree,Ubytec.Language.Operations.Interfaces.IOpCode,System.Collections.Generic.List{Ubytec.Language.Syntax.Model.SyntaxToken})
  id: BuildSyntaxTree(Ubytec.Language.Syntax.Model.SyntaxTree,Ubytec.Language.Operations.Interfaces.IOpCode,System.Collections.Generic.List{Ubytec.Language.Syntax.Model.SyntaxToken})
  parent: Ubytec.Language.AST.ASTCompiler
  langs:
  - csharp
  - vb
  name: BuildSyntaxTree(SyntaxTree, IOpCode, List<SyntaxToken>)
  nameWithType: ASTCompiler.BuildSyntaxTree(SyntaxTree, IOpCode, List<SyntaxToken>)
  fullName: Ubytec.Language.AST.ASTCompiler.BuildSyntaxTree(Ubytec.Language.Syntax.Model.SyntaxTree, Ubytec.Language.Operations.Interfaces.IOpCode, System.Collections.Generic.List<Ubytec.Language.Syntax.Model.SyntaxToken>)
  type: Method
  source:
    remote:
      path: Ubytec/Language/AST/ASTCompiler.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: BuildSyntaxTree
    path: ../Ubytec/Language/AST/ASTCompiler.cs
    startLine: 667
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.AST
  summary: >-
    Adds a node for the given <code class="paramref">opCode</code> and its associated <code class="paramref">tokens</code>

    to the <xref href="Ubytec.Language.Syntax.Model.SyntaxTree" data-throw-if-not-resolved="false"></xref> under construction.

    <p>Handles entering new block scopes (BLOCK, IF, ELSE, LOOP, WHILE, SWITCH) by creating

    new <xref href="Ubytec.Language.Syntax.Model.SyntaxSentence" data-throw-if-not-resolved="false"></xref> instances, and closes scopes (END, BREAK, RETURN) by

    popping sentences and attaching end nodes.</p>
  example: []
  syntax:
    content: private static void BuildSyntaxTree(SyntaxTree tree, IOpCode opCode, List<SyntaxToken> tokens)
    parameters:
    - id: tree
      type: Ubytec.Language.Syntax.Model.SyntaxTree
      description: >-
        The <xref href="Ubytec.Language.Syntax.Model.SyntaxTree" data-throw-if-not-resolved="false"></xref> currently being built; its <xref href="Ubytec.Language.Syntax.Model.SyntaxTree.TreeSentenceStack" data-throw-if-not-resolved="false"></xref>

        must contain at least one active <xref href="Ubytec.Language.Syntax.Model.SyntaxSentence" data-throw-if-not-resolved="false"></xref>.
    - id: opCode
      type: Ubytec.Language.Operations.Interfaces.IOpCode
      description: >-
        The <xref href="Ubytec.Language.Operations.Interfaces.IOpCode" data-throw-if-not-resolved="false"></xref> instruction to insert into the tree.

        May open a new scope, close an existing scope, or be added as a child of the current node.
    - id: tokens
      type: System.Collections.Generic.List{Ubytec.Language.Syntax.Model.SyntaxToken}
      description: >-
        The list of <xref href="Ubytec.Language.Syntax.Model.SyntaxToken" data-throw-if-not-resolved="false"></xref> instances associated with this instruction,

        typically grouped by their source-line number.
    content.vb: Private Shared Sub BuildSyntaxTree(tree As SyntaxTree, opCode As IOpCode, tokens As List(Of SyntaxToken))
  overload: Ubytec.Language.AST.ASTCompiler.BuildSyntaxTree*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: >-
      Thrown if <code class="paramref">tree</code> has no active sentence to attach to,

      or if a BRANCH appears without a surrounding SWITCH, or if an unsupported scope type is encountered.
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: >-
      Thrown if a scope-opening <code class="paramref">opCode</code> other than BLOCK, LOOP, IF, SWITCH, or WHILE

      is encountered when determining the sentence type.
  nameWithType.vb: ASTCompiler.BuildSyntaxTree(SyntaxTree, IOpCode, List(Of SyntaxToken))
  fullName.vb: Ubytec.Language.AST.ASTCompiler.BuildSyntaxTree(Ubytec.Language.Syntax.Model.SyntaxTree, Ubytec.Language.Operations.Interfaces.IOpCode, System.Collections.Generic.List(Of Ubytec.Language.Syntax.Model.SyntaxToken))
  name.vb: BuildSyntaxTree(SyntaxTree, IOpCode, List(Of SyntaxToken))
- uid: Ubytec.Language.AST.ASTCompiler.CompileAST(Ubytec.Language.Syntax.Model.SyntaxTree)
  commentId: M:Ubytec.Language.AST.ASTCompiler.CompileAST(Ubytec.Language.Syntax.Model.SyntaxTree)
  id: CompileAST(Ubytec.Language.Syntax.Model.SyntaxTree)
  parent: Ubytec.Language.AST.ASTCompiler
  langs:
  - csharp
  - vb
  name: CompileAST(SyntaxTree)
  nameWithType: ASTCompiler.CompileAST(SyntaxTree)
  fullName: Ubytec.Language.AST.ASTCompiler.CompileAST(Ubytec.Language.Syntax.Model.SyntaxTree)
  type: Method
  source:
    remote:
      path: Ubytec/Language/AST/ASTCompiler.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: CompileAST
    path: ../Ubytec/Language/AST/ASTCompiler.cs
    startLine: 814
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.AST
  summary: >-
    Compiles the given <xref href="Ubytec.Language.Syntax.Model.SyntaxTree" data-throw-if-not-resolved="false"></xref> into NASM assembly code.

    <p>Begins with the first sentence under the root and recursively processes

    all nested sentences and nodes.</p>
  example: []
  syntax:
    content: public static string CompileAST(SyntaxTree tree)
    parameters:
    - id: tree
      type: Ubytec.Language.Syntax.Model.SyntaxTree
      description: The fully constructed <xref href="Ubytec.Language.Syntax.Model.SyntaxTree" data-throw-if-not-resolved="false"></xref> whose root sentence will be compiled.
    return:
      type: System.String
      description: A <xref href="System.String" data-throw-if-not-resolved="false"></xref> containing the resulting NASM assembly code.
    content.vb: Public Shared Function CompileAST(tree As SyntaxTree) As String
  overload: Ubytec.Language.AST.ASTCompiler.CompileAST*
- uid: Ubytec.Language.AST.ASTCompiler.CompileSentence(Ubytec.Language.Syntax.Model.SyntaxSentence,Ubytec.Language.Syntax.Scopes.CompilationScopes)
  commentId: M:Ubytec.Language.AST.ASTCompiler.CompileSentence(Ubytec.Language.Syntax.Model.SyntaxSentence,Ubytec.Language.Syntax.Scopes.CompilationScopes)
  id: CompileSentence(Ubytec.Language.Syntax.Model.SyntaxSentence,Ubytec.Language.Syntax.Scopes.CompilationScopes)
  parent: Ubytec.Language.AST.ASTCompiler
  langs:
  - csharp
  - vb
  name: CompileSentence(SyntaxSentence, CompilationScopes)
  nameWithType: ASTCompiler.CompileSentence(SyntaxSentence, CompilationScopes)
  fullName: Ubytec.Language.AST.ASTCompiler.CompileSentence(Ubytec.Language.Syntax.Model.SyntaxSentence, Ubytec.Language.Syntax.Scopes.CompilationScopes)
  type: Method
  source:
    remote:
      path: Ubytec/Language/AST/ASTCompiler.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: CompileSentence
    path: ../Ubytec/Language/AST/ASTCompiler.cs
    startLine: 829
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.AST
  summary: >-
    Recursively compiles a <xref href="Ubytec.Language.Syntax.Model.SyntaxSentence" data-throw-if-not-resolved="false"></xref> into NASM assembly code,

    processing any nested sentences and nodes within it.
  example: []
  syntax:
    content: private static string CompileSentence(SyntaxSentence sentence, CompilationScopes scopes)
    parameters:
    - id: sentence
      type: Ubytec.Language.Syntax.Model.SyntaxSentence
      description: The <xref href="Ubytec.Language.Syntax.Model.SyntaxSentence" data-throw-if-not-resolved="false"></xref> to compile.
    - id: scopes
      type: Ubytec.Language.Syntax.Scopes.CompilationScopes
      description: The <xref href="Ubytec.Language.Syntax.Scopes.CompilationScopes" data-throw-if-not-resolved="false"></xref> used to manage indentation and control-flow context.
    return:
      type: System.String
      description: A <xref href="System.String" data-throw-if-not-resolved="false"></xref> fragment containing the NASM assembly code for the given sentence.
    content.vb: Private Shared Function CompileSentence(sentence As SyntaxSentence, scopes As CompilationScopes) As String
  overload: Ubytec.Language.AST.ASTCompiler.CompileSentence*
- uid: Ubytec.Language.AST.ASTCompiler.CompileBlockNode(Ubytec.Language.Syntax.Model.SyntaxSentence,Ubytec.Language.Syntax.Model.SyntaxNode,Ubytec.Language.Syntax.Scopes.CompilationScopes)
  commentId: M:Ubytec.Language.AST.ASTCompiler.CompileBlockNode(Ubytec.Language.Syntax.Model.SyntaxSentence,Ubytec.Language.Syntax.Model.SyntaxNode,Ubytec.Language.Syntax.Scopes.CompilationScopes)
  id: CompileBlockNode(Ubytec.Language.Syntax.Model.SyntaxSentence,Ubytec.Language.Syntax.Model.SyntaxNode,Ubytec.Language.Syntax.Scopes.CompilationScopes)
  parent: Ubytec.Language.AST.ASTCompiler
  langs:
  - csharp
  - vb
  name: CompileBlockNode(SyntaxSentence, SyntaxNode, CompilationScopes)
  nameWithType: ASTCompiler.CompileBlockNode(SyntaxSentence, SyntaxNode, CompilationScopes)
  fullName: Ubytec.Language.AST.ASTCompiler.CompileBlockNode(Ubytec.Language.Syntax.Model.SyntaxSentence, Ubytec.Language.Syntax.Model.SyntaxNode, Ubytec.Language.Syntax.Scopes.CompilationScopes)
  type: Method
  source:
    remote:
      path: Ubytec/Language/AST/ASTCompiler.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: CompileBlockNode
    path: ../Ubytec/Language/AST/ASTCompiler.cs
    startLine: 879
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.AST
  summary: >-
    Compiles a block-level <xref href="Ubytec.Language.Syntax.Model.SyntaxNode" data-throw-if-not-resolved="false"></xref> (e.g., BLOCK, IF, ELSE, LOOP, WHILE)

    along with its opening, nested sentences, and closing operations into NASM assembly,

    applying proper indentation and handling generated labels.
  example: []
  syntax:
    content: private static string CompileBlockNode(SyntaxSentence sentence, SyntaxNode node, CompilationScopes scopes)
    parameters:
    - id: sentence
      type: Ubytec.Language.Syntax.Model.SyntaxSentence
      description: The <xref href="Ubytec.Language.Syntax.Model.SyntaxSentence" data-throw-if-not-resolved="false"></xref> containing the block’s child sentences to compile.
    - id: node
      type: Ubytec.Language.Syntax.Model.SyntaxNode
      description: >-
        The <xref href="Ubytec.Language.Syntax.Model.SyntaxNode" data-throw-if-not-resolved="false"></xref> representing the block opcode to compile

        (including its metadata and any pre-collected children nodes).
    - id: scopes
      type: Ubytec.Language.Syntax.Scopes.CompilationScopes
      description: >-
        The <xref href="Ubytec.Language.Syntax.Scopes.CompilationScopes" data-throw-if-not-resolved="false"></xref> instance used to manage indentation levels

        and control-flow context during code generation.
    return:
      type: System.String
      description: >-
        A <xref href="System.String" data-throw-if-not-resolved="false"></xref> containing the NASM assembly code for the block’s opening opcode,

        its nested content, and the closing opcode.
    content.vb: Private Shared Function CompileBlockNode(sentence As SyntaxSentence, node As SyntaxNode, scopes As CompilationScopes) As String
  overload: Ubytec.Language.AST.ASTCompiler.CompileBlockNode*
references:
- uid: Ubytec.Language.Syntax.Model.SyntaxTree
  commentId: T:Ubytec.Language.Syntax.Model.SyntaxTree
  parent: Ubytec.Language.Syntax.Model
  href: Ubytec.Language.Syntax.Model.SyntaxTree.html
  name: SyntaxTree
  nameWithType: SyntaxTree
  fullName: Ubytec.Language.Syntax.Model.SyntaxTree
- uid: Ubytec.Language.AST.ASTCompiler
  commentId: T:Ubytec.Language.AST.ASTCompiler
  href: Ubytec.Language.AST.ASTCompiler.html
  name: ASTCompiler
  nameWithType: ASTCompiler
  fullName: Ubytec.Language.AST.ASTCompiler
- uid: Ubytec.Language.AST.ASTCompiler.Parse(Ubytec.Language.Syntax.Model.SyntaxToken[])
  commentId: M:Ubytec.Language.AST.ASTCompiler.Parse(Ubytec.Language.Syntax.Model.SyntaxToken[])
  href: Ubytec.Language.AST.ASTCompiler.Parse.html#Ubytec_Language_AST_ASTCompiler_Parse_Ubytec_Language_Syntax_Model_SyntaxToken___
  name: Parse(SyntaxToken[])
  nameWithType: ASTCompiler.Parse(SyntaxToken[])
  fullName: Ubytec.Language.AST.ASTCompiler.Parse(Ubytec.Language.Syntax.Model.SyntaxToken[])
  nameWithType.vb: ASTCompiler.Parse(SyntaxToken())
  fullName.vb: Ubytec.Language.AST.ASTCompiler.Parse(Ubytec.Language.Syntax.Model.SyntaxToken())
  name.vb: Parse(SyntaxToken())
  spec.csharp:
  - uid: Ubytec.Language.AST.ASTCompiler.Parse(Ubytec.Language.Syntax.Model.SyntaxToken[])
    name: Parse
    href: Ubytec.Language.AST.ASTCompiler.Parse.html#Ubytec_Language_AST_ASTCompiler_Parse_Ubytec_Language_Syntax_Model_SyntaxToken___
  - name: (
  - uid: Ubytec.Language.Syntax.Model.SyntaxToken
    name: SyntaxToken
    href: Ubytec.Language.Syntax.Model.SyntaxToken.html
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Ubytec.Language.AST.ASTCompiler.Parse(Ubytec.Language.Syntax.Model.SyntaxToken[])
    name: Parse
    href: Ubytec.Language.AST.ASTCompiler.Parse.html#Ubytec_Language_AST_ASTCompiler_Parse_Ubytec_Language_Syntax_Model_SyntaxToken___
  - name: (
  - uid: Ubytec.Language.Syntax.Model.SyntaxToken
    name: SyntaxToken
    href: Ubytec.Language.Syntax.Model.SyntaxToken.html
  - name: (
  - name: )
  - name: )
- uid: Ubytec.Language.AST.ASTCompiler.CompileSyntax(Ubytec.Language.Operations.Interfaces.IOpCode[],Ubytec.Language.Syntax.Model.SyntaxToken[])
  commentId: M:Ubytec.Language.AST.ASTCompiler.CompileSyntax(Ubytec.Language.Operations.Interfaces.IOpCode[],Ubytec.Language.Syntax.Model.SyntaxToken[])
  href: Ubytec.Language.AST.ASTCompiler.CompileSyntax.html#Ubytec_Language_AST_ASTCompiler_CompileSyntax_Ubytec_Language_Operations_Interfaces_IOpCode___Ubytec_Language_Syntax_Model_SyntaxToken___
  name: CompileSyntax(IOpCode[], SyntaxToken[])
  nameWithType: ASTCompiler.CompileSyntax(IOpCode[], SyntaxToken[])
  fullName: Ubytec.Language.AST.ASTCompiler.CompileSyntax(Ubytec.Language.Operations.Interfaces.IOpCode[], Ubytec.Language.Syntax.Model.SyntaxToken[])
  nameWithType.vb: ASTCompiler.CompileSyntax(IOpCode(), SyntaxToken())
  fullName.vb: Ubytec.Language.AST.ASTCompiler.CompileSyntax(Ubytec.Language.Operations.Interfaces.IOpCode(), Ubytec.Language.Syntax.Model.SyntaxToken())
  name.vb: CompileSyntax(IOpCode(), SyntaxToken())
  spec.csharp:
  - uid: Ubytec.Language.AST.ASTCompiler.CompileSyntax(Ubytec.Language.Operations.Interfaces.IOpCode[],Ubytec.Language.Syntax.Model.SyntaxToken[])
    name: CompileSyntax
    href: Ubytec.Language.AST.ASTCompiler.CompileSyntax.html#Ubytec_Language_AST_ASTCompiler_CompileSyntax_Ubytec_Language_Operations_Interfaces_IOpCode___Ubytec_Language_Syntax_Model_SyntaxToken___
  - name: (
  - uid: Ubytec.Language.Operations.Interfaces.IOpCode
    name: IOpCode
    href: Ubytec.Language.Operations.Interfaces.IOpCode.html
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: Ubytec.Language.Syntax.Model.SyntaxToken
    name: SyntaxToken
    href: Ubytec.Language.Syntax.Model.SyntaxToken.html
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Ubytec.Language.AST.ASTCompiler.CompileSyntax(Ubytec.Language.Operations.Interfaces.IOpCode[],Ubytec.Language.Syntax.Model.SyntaxToken[])
    name: CompileSyntax
    href: Ubytec.Language.AST.ASTCompiler.CompileSyntax.html#Ubytec_Language_AST_ASTCompiler_CompileSyntax_Ubytec_Language_Operations_Interfaces_IOpCode___Ubytec_Language_Syntax_Model_SyntaxToken___
  - name: (
  - uid: Ubytec.Language.Operations.Interfaces.IOpCode
    name: IOpCode
    href: Ubytec.Language.Operations.Interfaces.IOpCode.html
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: Ubytec.Language.Syntax.Model.SyntaxToken
    name: SyntaxToken
    href: Ubytec.Language.Syntax.Model.SyntaxToken.html
  - name: (
  - name: )
  - name: )
- uid: Ubytec.Language.AST.ASTCompiler.BuildSyntaxTree(Ubytec.Language.Syntax.Model.SyntaxTree,Ubytec.Language.Operations.Interfaces.IOpCode,System.Collections.Generic.List{Ubytec.Language.Syntax.Model.SyntaxToken})
  commentId: M:Ubytec.Language.AST.ASTCompiler.BuildSyntaxTree(Ubytec.Language.Syntax.Model.SyntaxTree,Ubytec.Language.Operations.Interfaces.IOpCode,System.Collections.Generic.List{Ubytec.Language.Syntax.Model.SyntaxToken})
  isExternal: true
  href: Ubytec.Language.AST.ASTCompiler.BuildSyntaxTree.html#Ubytec_Language_AST_ASTCompiler_BuildSyntaxTree_Ubytec_Language_Syntax_Model_SyntaxTree_Ubytec_Language_Operations_Interfaces_IOpCode_System_Collections_Generic_List_Ubytec_Language_Syntax_Model_SyntaxToken__
  name: BuildSyntaxTree(SyntaxTree, IOpCode, List<SyntaxToken>)
  nameWithType: ASTCompiler.BuildSyntaxTree(SyntaxTree, IOpCode, List<SyntaxToken>)
  fullName: Ubytec.Language.AST.ASTCompiler.BuildSyntaxTree(Ubytec.Language.Syntax.Model.SyntaxTree, Ubytec.Language.Operations.Interfaces.IOpCode, System.Collections.Generic.List<Ubytec.Language.Syntax.Model.SyntaxToken>)
  nameWithType.vb: ASTCompiler.BuildSyntaxTree(SyntaxTree, IOpCode, List(Of SyntaxToken))
  fullName.vb: Ubytec.Language.AST.ASTCompiler.BuildSyntaxTree(Ubytec.Language.Syntax.Model.SyntaxTree, Ubytec.Language.Operations.Interfaces.IOpCode, System.Collections.Generic.List(Of Ubytec.Language.Syntax.Model.SyntaxToken))
  name.vb: BuildSyntaxTree(SyntaxTree, IOpCode, List(Of SyntaxToken))
  spec.csharp:
  - uid: Ubytec.Language.AST.ASTCompiler.BuildSyntaxTree(Ubytec.Language.Syntax.Model.SyntaxTree,Ubytec.Language.Operations.Interfaces.IOpCode,System.Collections.Generic.List{Ubytec.Language.Syntax.Model.SyntaxToken})
    name: BuildSyntaxTree
    href: Ubytec.Language.AST.ASTCompiler.BuildSyntaxTree.html#Ubytec_Language_AST_ASTCompiler_BuildSyntaxTree_Ubytec_Language_Syntax_Model_SyntaxTree_Ubytec_Language_Operations_Interfaces_IOpCode_System_Collections_Generic_List_Ubytec_Language_Syntax_Model_SyntaxToken__
  - name: (
  - uid: Ubytec.Language.Syntax.Model.SyntaxTree
    name: SyntaxTree
    href: Ubytec.Language.Syntax.Model.SyntaxTree.html
  - name: ','
  - name: " "
  - uid: Ubytec.Language.Operations.Interfaces.IOpCode
    name: IOpCode
    href: Ubytec.Language.Operations.Interfaces.IOpCode.html
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Ubytec.Language.Syntax.Model.SyntaxToken
    name: SyntaxToken
    href: Ubytec.Language.Syntax.Model.SyntaxToken.html
  - name: '>'
  - name: )
  spec.vb:
  - uid: Ubytec.Language.AST.ASTCompiler.BuildSyntaxTree(Ubytec.Language.Syntax.Model.SyntaxTree,Ubytec.Language.Operations.Interfaces.IOpCode,System.Collections.Generic.List{Ubytec.Language.Syntax.Model.SyntaxToken})
    name: BuildSyntaxTree
    href: Ubytec.Language.AST.ASTCompiler.BuildSyntaxTree.html#Ubytec_Language_AST_ASTCompiler_BuildSyntaxTree_Ubytec_Language_Syntax_Model_SyntaxTree_Ubytec_Language_Operations_Interfaces_IOpCode_System_Collections_Generic_List_Ubytec_Language_Syntax_Model_SyntaxToken__
  - name: (
  - uid: Ubytec.Language.Syntax.Model.SyntaxTree
    name: SyntaxTree
    href: Ubytec.Language.Syntax.Model.SyntaxTree.html
  - name: ','
  - name: " "
  - uid: Ubytec.Language.Operations.Interfaces.IOpCode
    name: IOpCode
    href: Ubytec.Language.Operations.Interfaces.IOpCode.html
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Ubytec.Language.Syntax.Model.SyntaxToken
    name: SyntaxToken
    href: Ubytec.Language.Syntax.Model.SyntaxToken.html
  - name: )
  - name: )
- uid: Ubytec.Language.AST.ASTCompiler.CompileAST(Ubytec.Language.Syntax.Model.SyntaxTree)
  commentId: M:Ubytec.Language.AST.ASTCompiler.CompileAST(Ubytec.Language.Syntax.Model.SyntaxTree)
  href: Ubytec.Language.AST.ASTCompiler.CompileAST.html#Ubytec_Language_AST_ASTCompiler_CompileAST_Ubytec_Language_Syntax_Model_SyntaxTree_
  name: CompileAST(SyntaxTree)
  nameWithType: ASTCompiler.CompileAST(SyntaxTree)
  fullName: Ubytec.Language.AST.ASTCompiler.CompileAST(Ubytec.Language.Syntax.Model.SyntaxTree)
  spec.csharp:
  - uid: Ubytec.Language.AST.ASTCompiler.CompileAST(Ubytec.Language.Syntax.Model.SyntaxTree)
    name: CompileAST
    href: Ubytec.Language.AST.ASTCompiler.CompileAST.html#Ubytec_Language_AST_ASTCompiler_CompileAST_Ubytec_Language_Syntax_Model_SyntaxTree_
  - name: (
  - uid: Ubytec.Language.Syntax.Model.SyntaxTree
    name: SyntaxTree
    href: Ubytec.Language.Syntax.Model.SyntaxTree.html
  - name: )
  spec.vb:
  - uid: Ubytec.Language.AST.ASTCompiler.CompileAST(Ubytec.Language.Syntax.Model.SyntaxTree)
    name: CompileAST
    href: Ubytec.Language.AST.ASTCompiler.CompileAST.html#Ubytec_Language_AST_ASTCompiler_CompileAST_Ubytec_Language_Syntax_Model_SyntaxTree_
  - name: (
  - uid: Ubytec.Language.Syntax.Model.SyntaxTree
    name: SyntaxTree
    href: Ubytec.Language.Syntax.Model.SyntaxTree.html
  - name: )
- uid: Ubytec.Language.AST.ASTCompiler.CompileSentence(Ubytec.Language.Syntax.Model.SyntaxSentence,Ubytec.Language.Syntax.Scopes.CompilationScopes)
  commentId: M:Ubytec.Language.AST.ASTCompiler.CompileSentence(Ubytec.Language.Syntax.Model.SyntaxSentence,Ubytec.Language.Syntax.Scopes.CompilationScopes)
  href: Ubytec.Language.AST.ASTCompiler.CompileSentence.html#Ubytec_Language_AST_ASTCompiler_CompileSentence_Ubytec_Language_Syntax_Model_SyntaxSentence_Ubytec_Language_Syntax_Scopes_CompilationScopes_
  name: CompileSentence(SyntaxSentence, CompilationScopes)
  nameWithType: ASTCompiler.CompileSentence(SyntaxSentence, CompilationScopes)
  fullName: Ubytec.Language.AST.ASTCompiler.CompileSentence(Ubytec.Language.Syntax.Model.SyntaxSentence, Ubytec.Language.Syntax.Scopes.CompilationScopes)
  spec.csharp:
  - uid: Ubytec.Language.AST.ASTCompiler.CompileSentence(Ubytec.Language.Syntax.Model.SyntaxSentence,Ubytec.Language.Syntax.Scopes.CompilationScopes)
    name: CompileSentence
    href: Ubytec.Language.AST.ASTCompiler.CompileSentence.html#Ubytec_Language_AST_ASTCompiler_CompileSentence_Ubytec_Language_Syntax_Model_SyntaxSentence_Ubytec_Language_Syntax_Scopes_CompilationScopes_
  - name: (
  - uid: Ubytec.Language.Syntax.Model.SyntaxSentence
    name: SyntaxSentence
    href: Ubytec.Language.Syntax.Model.SyntaxSentence.html
  - name: ','
  - name: " "
  - uid: Ubytec.Language.Syntax.Scopes.CompilationScopes
    name: CompilationScopes
    href: Ubytec.Language.Syntax.Scopes.CompilationScopes.html
  - name: )
  spec.vb:
  - uid: Ubytec.Language.AST.ASTCompiler.CompileSentence(Ubytec.Language.Syntax.Model.SyntaxSentence,Ubytec.Language.Syntax.Scopes.CompilationScopes)
    name: CompileSentence
    href: Ubytec.Language.AST.ASTCompiler.CompileSentence.html#Ubytec_Language_AST_ASTCompiler_CompileSentence_Ubytec_Language_Syntax_Model_SyntaxSentence_Ubytec_Language_Syntax_Scopes_CompilationScopes_
  - name: (
  - uid: Ubytec.Language.Syntax.Model.SyntaxSentence
    name: SyntaxSentence
    href: Ubytec.Language.Syntax.Model.SyntaxSentence.html
  - name: ','
  - name: " "
  - uid: Ubytec.Language.Syntax.Scopes.CompilationScopes
    name: CompilationScopes
    href: Ubytec.Language.Syntax.Scopes.CompilationScopes.html
  - name: )
- uid: Ubytec.Language.AST.ASTCompiler.CompileBlockNode(Ubytec.Language.Syntax.Model.SyntaxSentence,Ubytec.Language.Syntax.Model.SyntaxNode,Ubytec.Language.Syntax.Scopes.CompilationScopes)
  commentId: M:Ubytec.Language.AST.ASTCompiler.CompileBlockNode(Ubytec.Language.Syntax.Model.SyntaxSentence,Ubytec.Language.Syntax.Model.SyntaxNode,Ubytec.Language.Syntax.Scopes.CompilationScopes)
  href: Ubytec.Language.AST.ASTCompiler.CompileBlockNode.html#Ubytec_Language_AST_ASTCompiler_CompileBlockNode_Ubytec_Language_Syntax_Model_SyntaxSentence_Ubytec_Language_Syntax_Model_SyntaxNode_Ubytec_Language_Syntax_Scopes_CompilationScopes_
  name: CompileBlockNode(SyntaxSentence, SyntaxNode, CompilationScopes)
  nameWithType: ASTCompiler.CompileBlockNode(SyntaxSentence, SyntaxNode, CompilationScopes)
  fullName: Ubytec.Language.AST.ASTCompiler.CompileBlockNode(Ubytec.Language.Syntax.Model.SyntaxSentence, Ubytec.Language.Syntax.Model.SyntaxNode, Ubytec.Language.Syntax.Scopes.CompilationScopes)
  spec.csharp:
  - uid: Ubytec.Language.AST.ASTCompiler.CompileBlockNode(Ubytec.Language.Syntax.Model.SyntaxSentence,Ubytec.Language.Syntax.Model.SyntaxNode,Ubytec.Language.Syntax.Scopes.CompilationScopes)
    name: CompileBlockNode
    href: Ubytec.Language.AST.ASTCompiler.CompileBlockNode.html#Ubytec_Language_AST_ASTCompiler_CompileBlockNode_Ubytec_Language_Syntax_Model_SyntaxSentence_Ubytec_Language_Syntax_Model_SyntaxNode_Ubytec_Language_Syntax_Scopes_CompilationScopes_
  - name: (
  - uid: Ubytec.Language.Syntax.Model.SyntaxSentence
    name: SyntaxSentence
    href: Ubytec.Language.Syntax.Model.SyntaxSentence.html
  - name: ','
  - name: " "
  - uid: Ubytec.Language.Syntax.Model.SyntaxNode
    name: SyntaxNode
    href: Ubytec.Language.Syntax.Model.SyntaxNode.html
  - name: ','
  - name: " "
  - uid: Ubytec.Language.Syntax.Scopes.CompilationScopes
    name: CompilationScopes
    href: Ubytec.Language.Syntax.Scopes.CompilationScopes.html
  - name: )
  spec.vb:
  - uid: Ubytec.Language.AST.ASTCompiler.CompileBlockNode(Ubytec.Language.Syntax.Model.SyntaxSentence,Ubytec.Language.Syntax.Model.SyntaxNode,Ubytec.Language.Syntax.Scopes.CompilationScopes)
    name: CompileBlockNode
    href: Ubytec.Language.AST.ASTCompiler.CompileBlockNode.html#Ubytec_Language_AST_ASTCompiler_CompileBlockNode_Ubytec_Language_Syntax_Model_SyntaxSentence_Ubytec_Language_Syntax_Model_SyntaxNode_Ubytec_Language_Syntax_Scopes_CompilationScopes_
  - name: (
  - uid: Ubytec.Language.Syntax.Model.SyntaxSentence
    name: SyntaxSentence
    href: Ubytec.Language.Syntax.Model.SyntaxSentence.html
  - name: ','
  - name: " "
  - uid: Ubytec.Language.Syntax.Model.SyntaxNode
    name: SyntaxNode
    href: Ubytec.Language.Syntax.Model.SyntaxNode.html
  - name: ','
  - name: " "
  - uid: Ubytec.Language.Syntax.Scopes.CompilationScopes
    name: CompilationScopes
    href: Ubytec.Language.Syntax.Scopes.CompilationScopes.html
  - name: )
- uid: Ubytec.Language.AST.ASTCompiler.CompileSyntaxError
  commentId: T:Ubytec.Language.AST.ASTCompiler.CompileSyntaxError
  href: Ubytec.Language.AST.ASTCompiler.html
  name: ASTCompiler.CompileSyntaxError
  nameWithType: ASTCompiler.CompileSyntaxError
  fullName: Ubytec.Language.AST.ASTCompiler.CompileSyntaxError
  spec.csharp:
  - uid: Ubytec.Language.AST.ASTCompiler
    name: ASTCompiler
    href: Ubytec.Language.AST.ASTCompiler.html
  - name: .
  - uid: Ubytec.Language.AST.ASTCompiler.CompileSyntaxError
    name: CompileSyntaxError
    href: Ubytec.Language.AST.ASTCompiler.CompileSyntaxError.html
  spec.vb:
  - uid: Ubytec.Language.AST.ASTCompiler
    name: ASTCompiler
    href: Ubytec.Language.AST.ASTCompiler.html
  - name: .
  - uid: Ubytec.Language.AST.ASTCompiler.CompileSyntaxError
    name: CompileSyntaxError
    href: Ubytec.Language.AST.ASTCompiler.CompileSyntaxError.html
- uid: Ubytec.Language.AST
  commentId: N:Ubytec.Language.AST
  href: Ubytec.html
  name: Ubytec.Language.AST
  nameWithType: Ubytec.Language.AST
  fullName: Ubytec.Language.AST
  spec.csharp:
  - uid: Ubytec
    name: Ubytec
    href: Ubytec.html
  - name: .
  - uid: Ubytec.Language
    name: Language
    href: Ubytec.Language.html
  - name: .
  - uid: Ubytec.Language.AST
    name: AST
    href: Ubytec.Language.AST.html
  spec.vb:
  - uid: Ubytec
    name: Ubytec
    href: Ubytec.html
  - name: .
  - uid: Ubytec.Language
    name: Language
    href: Ubytec.Language.html
  - name: .
  - uid: Ubytec.Language.AST
    name: AST
    href: Ubytec.Language.AST.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: Ubytec.Language.Syntax.Model
  commentId: N:Ubytec.Language.Syntax.Model
  href: Ubytec.html
  name: Ubytec.Language.Syntax.Model
  nameWithType: Ubytec.Language.Syntax.Model
  fullName: Ubytec.Language.Syntax.Model
  spec.csharp:
  - uid: Ubytec
    name: Ubytec
    href: Ubytec.html
  - name: .
  - uid: Ubytec.Language
    name: Language
    href: Ubytec.Language.html
  - name: .
  - uid: Ubytec.Language.Syntax
    name: Syntax
    href: Ubytec.Language.Syntax.html
  - name: .
  - uid: Ubytec.Language.Syntax.Model
    name: Model
    href: Ubytec.Language.Syntax.Model.html
  spec.vb:
  - uid: Ubytec
    name: Ubytec
    href: Ubytec.html
  - name: .
  - uid: Ubytec.Language
    name: Language
    href: Ubytec.Language.html
  - name: .
  - uid: Ubytec.Language.Syntax
    name: Syntax
    href: Ubytec.Language.Syntax.html
  - name: .
  - uid: Ubytec.Language.Syntax.Model
    name: Model
    href: Ubytec.Language.Syntax.Model.html
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.Dictionary{System.String,System.Byte}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Byte}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<string, byte>
  nameWithType: Dictionary<string, byte>
  fullName: System.Collections.Generic.Dictionary<string, byte>
  nameWithType.vb: Dictionary(Of String, Byte)
  fullName.vb: System.Collections.Generic.Dictionary(Of String, Byte)
  name.vb: Dictionary(Of String, Byte)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Ubytec.Language.Syntax.Model.SyntaxToken
  commentId: T:Ubytec.Language.Syntax.Model.SyntaxToken
  parent: Ubytec.Language.Syntax.Model
  href: Ubytec.Language.Syntax.Model.SyntaxToken.html
  name: SyntaxToken
  nameWithType: SyntaxToken
  fullName: Ubytec.Language.Syntax.Model.SyntaxToken
- uid: Ubytec.Language.Operations.Interfaces.IOpCode
  commentId: T:Ubytec.Language.Operations.Interfaces.IOpCode
  parent: Ubytec.Language.Operations.Interfaces
  href: Ubytec.Language.Operations.Interfaces.IOpCode.html
  name: IOpCode
  nameWithType: IOpCode
  fullName: Ubytec.Language.Operations.Interfaces.IOpCode
- uid: Ubytec.Language.AST.ASTCompiler.Parse*
  commentId: Overload:Ubytec.Language.AST.ASTCompiler.Parse
  href: Ubytec.Language.AST.ASTCompiler.Parse.html#Ubytec_Language_AST_ASTCompiler_Parse_Ubytec_Language_Syntax_Model_SyntaxToken___
  name: Parse
  nameWithType: ASTCompiler.Parse
  fullName: Ubytec.Language.AST.ASTCompiler.Parse
- uid: Ubytec.Language.Syntax.Model.SyntaxToken[]
  isExternal: true
  href: Ubytec.Language.Syntax.Model.SyntaxToken.html
  name: SyntaxToken[]
  nameWithType: SyntaxToken[]
  fullName: Ubytec.Language.Syntax.Model.SyntaxToken[]
  nameWithType.vb: SyntaxToken()
  fullName.vb: Ubytec.Language.Syntax.Model.SyntaxToken()
  name.vb: SyntaxToken()
  spec.csharp:
  - uid: Ubytec.Language.Syntax.Model.SyntaxToken
    name: SyntaxToken
    href: Ubytec.Language.Syntax.Model.SyntaxToken.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Ubytec.Language.Syntax.Model.SyntaxToken
    name: SyntaxToken
    href: Ubytec.Language.Syntax.Model.SyntaxToken.html
  - name: (
  - name: )
- uid: Ubytec.Language.Operations.Interfaces.IOpCode[]
  isExternal: true
  href: Ubytec.Language.Operations.Interfaces.IOpCode.html
  name: IOpCode[]
  nameWithType: IOpCode[]
  fullName: Ubytec.Language.Operations.Interfaces.IOpCode[]
  nameWithType.vb: IOpCode()
  fullName.vb: Ubytec.Language.Operations.Interfaces.IOpCode()
  name.vb: IOpCode()
  spec.csharp:
  - uid: Ubytec.Language.Operations.Interfaces.IOpCode
    name: IOpCode
    href: Ubytec.Language.Operations.Interfaces.IOpCode.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Ubytec.Language.Operations.Interfaces.IOpCode
    name: IOpCode
    href: Ubytec.Language.Operations.Interfaces.IOpCode.html
  - name: (
  - name: )
- uid: Ubytec.Language.Operations.Interfaces
  commentId: N:Ubytec.Language.Operations.Interfaces
  href: Ubytec.html
  name: Ubytec.Language.Operations.Interfaces
  nameWithType: Ubytec.Language.Operations.Interfaces
  fullName: Ubytec.Language.Operations.Interfaces
  spec.csharp:
  - uid: Ubytec
    name: Ubytec
    href: Ubytec.html
  - name: .
  - uid: Ubytec.Language
    name: Language
    href: Ubytec.Language.html
  - name: .
  - uid: Ubytec.Language.Operations
    name: Operations
    href: Ubytec.Language.Operations.html
  - name: .
  - uid: Ubytec.Language.Operations.Interfaces
    name: Interfaces
    href: Ubytec.Language.Operations.Interfaces.html
  spec.vb:
  - uid: Ubytec
    name: Ubytec
    href: Ubytec.html
  - name: .
  - uid: Ubytec.Language
    name: Language
    href: Ubytec.Language.html
  - name: .
  - uid: Ubytec.Language.Operations
    name: Operations
    href: Ubytec.Language.Operations.html
  - name: .
  - uid: Ubytec.Language.Operations.Interfaces
    name: Interfaces
    href: Ubytec.Language.Operations.Interfaces.html
- uid: System.Collections.Generic.Queue`1
  commentId: T:System.Collections.Generic.Queue`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.queue-1
  name: Queue<T>
  nameWithType: Queue<T>
  fullName: System.Collections.Generic.Queue<T>
  nameWithType.vb: Queue(Of T)
  fullName.vb: System.Collections.Generic.Queue(Of T)
  name.vb: Queue(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.Queue`1
    name: Queue
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.queue-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Queue`1
    name: Queue
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.queue-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Ubytec.Language.Exceptions.IlegalTokenException
  commentId: T:Ubytec.Language.Exceptions.IlegalTokenException
  href: Ubytec.Language.Exceptions.IlegalTokenException.html
  name: IlegalTokenException
  nameWithType: IlegalTokenException
  fullName: Ubytec.Language.Exceptions.IlegalTokenException
- uid: Ubytec.Language.Exceptions.SyntaxException
  commentId: T:Ubytec.Language.Exceptions.SyntaxException
  href: Ubytec.Language.Exceptions.SyntaxException.html
  name: SyntaxException
  nameWithType: SyntaxException
  fullName: Ubytec.Language.Exceptions.SyntaxException
- uid: Ubytec.Language.AST.ASTCompiler.ProcessOperand*
  commentId: Overload:Ubytec.Language.AST.ASTCompiler.ProcessOperand
  href: Ubytec.Language.AST.ASTCompiler.ProcessOperand.html#Ubytec_Language_AST_ASTCompiler_ProcessOperand_Ubytec_Language_Syntax_Model_SyntaxToken_System_Collections_Generic_Queue_System_ValueType__
  name: ProcessOperand
  nameWithType: ASTCompiler.ProcessOperand
  fullName: Ubytec.Language.AST.ASTCompiler.ProcessOperand
- uid: System.Collections.Generic.Queue{System.ValueType}
  commentId: T:System.Collections.Generic.Queue{System.ValueType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Queue`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.queue-1
  name: Queue<ValueType>
  nameWithType: Queue<ValueType>
  fullName: System.Collections.Generic.Queue<System.ValueType>
  nameWithType.vb: Queue(Of ValueType)
  fullName.vb: System.Collections.Generic.Queue(Of System.ValueType)
  name.vb: Queue(Of ValueType)
  spec.csharp:
  - uid: System.Collections.Generic.Queue`1
    name: Queue
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.queue-1
  - name: <
  - uid: System.ValueType
    name: ValueType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Queue`1
    name: Queue
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.queue-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.ValueType
    name: ValueType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype
  - name: )
- uid: Ubytec.Language.AST.ASTCompiler.InheritVariables*
  commentId: Overload:Ubytec.Language.AST.ASTCompiler.InheritVariables
  href: Ubytec.Language.AST.ASTCompiler.InheritVariables.html#Ubytec_Language_AST_ASTCompiler_InheritVariables_Ubytec_Language_Operations_Interfaces_IOpVariableScope_Ubytec_Language_Operations_Interfaces_IOpVariableScope_
  name: InheritVariables
  nameWithType: ASTCompiler.InheritVariables
  fullName: Ubytec.Language.AST.ASTCompiler.InheritVariables
- uid: Ubytec.Language.Operations.Interfaces.IOpVariableScope
  commentId: T:Ubytec.Language.Operations.Interfaces.IOpVariableScope
  parent: Ubytec.Language.Operations.Interfaces
  href: Ubytec.Language.Operations.Interfaces.IOpVariableScope.html
  name: IOpVariableScope
  nameWithType: IOpVariableScope
  fullName: Ubytec.Language.Operations.Interfaces.IOpVariableScope
- uid: Ubytec.Language.AST.ASTCompiler.MergeVariables*
  commentId: Overload:Ubytec.Language.AST.ASTCompiler.MergeVariables
  href: Ubytec.Language.AST.ASTCompiler.MergeVariables.html#Ubytec_Language_AST_ASTCompiler_MergeVariables_Ubytec_Language_Operations_Interfaces_IBlockOpCode_Ubytec_Language_Operations_CoreOperations_VAR_
  name: MergeVariables
  nameWithType: ASTCompiler.MergeVariables
  fullName: Ubytec.Language.AST.ASTCompiler.MergeVariables
- uid: Ubytec.Language.Operations.Interfaces.IBlockOpCode
  commentId: T:Ubytec.Language.Operations.Interfaces.IBlockOpCode
  parent: Ubytec.Language.Operations.Interfaces
  href: Ubytec.Language.Operations.Interfaces.IBlockOpCode.html
  name: IBlockOpCode
  nameWithType: IBlockOpCode
  fullName: Ubytec.Language.Operations.Interfaces.IBlockOpCode
- uid: Ubytec.Language.Operations.CoreOperations.VAR
  commentId: T:Ubytec.Language.Operations.CoreOperations.VAR
  parent: Ubytec.Language.Operations
  href: Ubytec.Language.Operations.CoreOperations.html
  name: CoreOperations.VAR
  nameWithType: CoreOperations.VAR
  fullName: Ubytec.Language.Operations.CoreOperations.VAR
  spec.csharp:
  - uid: Ubytec.Language.Operations.CoreOperations
    name: CoreOperations
    href: Ubytec.Language.Operations.CoreOperations.html
  - name: .
  - uid: Ubytec.Language.Operations.CoreOperations.VAR
    name: VAR
    href: Ubytec.Language.Operations.CoreOperations.VAR.html
  spec.vb:
  - uid: Ubytec.Language.Operations.CoreOperations
    name: CoreOperations
    href: Ubytec.Language.Operations.CoreOperations.html
  - name: .
  - uid: Ubytec.Language.Operations.CoreOperations.VAR
    name: VAR
    href: Ubytec.Language.Operations.CoreOperations.VAR.html
- uid: Ubytec.Language.Operations
  commentId: N:Ubytec.Language.Operations
  href: Ubytec.html
  name: Ubytec.Language.Operations
  nameWithType: Ubytec.Language.Operations
  fullName: Ubytec.Language.Operations
  spec.csharp:
  - uid: Ubytec
    name: Ubytec
    href: Ubytec.html
  - name: .
  - uid: Ubytec.Language
    name: Language
    href: Ubytec.Language.html
  - name: .
  - uid: Ubytec.Language.Operations
    name: Operations
    href: Ubytec.Language.Operations.html
  spec.vb:
  - uid: Ubytec
    name: Ubytec
    href: Ubytec.html
  - name: .
  - uid: Ubytec.Language
    name: Language
    href: Ubytec.Language.html
  - name: .
  - uid: Ubytec.Language.Operations
    name: Operations
    href: Ubytec.Language.Operations.html
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Ubytec.Language.AST.ASTCompiler.CompileSyntax*
  commentId: Overload:Ubytec.Language.AST.ASTCompiler.CompileSyntax
  href: Ubytec.Language.AST.ASTCompiler.CompileSyntax.html#Ubytec_Language_AST_ASTCompiler_CompileSyntax_Ubytec_Language_Operations_Interfaces_IOpCode___Ubytec_Language_Syntax_Model_SyntaxToken___
  name: CompileSyntax
  nameWithType: ASTCompiler.CompileSyntax
  fullName: Ubytec.Language.AST.ASTCompiler.CompileSyntax
- uid: System.ValueTuple{Ubytec.Language.Syntax.Model.SyntaxTree,System.Collections.Generic.List{Ubytec.Language.AST.ASTCompiler.CompileSyntaxError}}
  commentId: T:System.ValueTuple{Ubytec.Language.Syntax.Model.SyntaxTree,System.Collections.Generic.List{Ubytec.Language.AST.ASTCompiler.CompileSyntaxError}}
  parent: System
  definition: System.ValueTuple`2
  href: Ubytec.Language.Syntax.Model.SyntaxTree.html
  name: (SyntaxTree tree, List<ASTCompiler.CompileSyntaxError> errors)
  nameWithType: (SyntaxTree tree, List<ASTCompiler.CompileSyntaxError> errors)
  fullName: (Ubytec.Language.Syntax.Model.SyntaxTree tree, System.Collections.Generic.List<Ubytec.Language.AST.ASTCompiler.CompileSyntaxError> errors)
  nameWithType.vb: (tree As SyntaxTree, errors As List(Of ASTCompiler.CompileSyntaxError))
  fullName.vb: (tree As Ubytec.Language.Syntax.Model.SyntaxTree, errors As System.Collections.Generic.List(Of Ubytec.Language.AST.ASTCompiler.CompileSyntaxError))
  name.vb: (tree As SyntaxTree, errors As List(Of ASTCompiler.CompileSyntaxError))
  spec.csharp:
  - name: (
  - uid: Ubytec.Language.Syntax.Model.SyntaxTree
    name: SyntaxTree
    href: Ubytec.Language.Syntax.Model.SyntaxTree.html
  - name: " "
  - uid: System.ValueTuple{Ubytec.Language.Syntax.Model.SyntaxTree,System.Collections.Generic.List{Ubytec.Language.AST.ASTCompiler.CompileSyntaxError}}.tree
    name: tree
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-ubytec.language.syntax.model.syntaxtree,system.collections.generic.list-ubytec.language.ast.astcompiler.compilesyntaxerror--.tree
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Ubytec.Language.AST.ASTCompiler
    name: ASTCompiler
    href: Ubytec.Language.AST.ASTCompiler.html
  - name: .
  - uid: Ubytec.Language.AST.ASTCompiler.CompileSyntaxError
    name: CompileSyntaxError
    href: Ubytec.Language.AST.ASTCompiler.CompileSyntaxError.html
  - name: '>'
  - name: " "
  - uid: System.ValueTuple{Ubytec.Language.Syntax.Model.SyntaxTree,System.Collections.Generic.List{Ubytec.Language.AST.ASTCompiler.CompileSyntaxError}}.errors
    name: errors
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-ubytec.language.syntax.model.syntaxtree,system.collections.generic.list-ubytec.language.ast.astcompiler.compilesyntaxerror--.errors
  - name: )
  spec.vb:
  - name: (
  - uid: System.ValueTuple{Ubytec.Language.Syntax.Model.SyntaxTree,System.Collections.Generic.List{Ubytec.Language.AST.ASTCompiler.CompileSyntaxError}}.tree
    name: tree
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-ubytec.language.syntax.model.syntaxtree,system.collections.generic.list-ubytec.language.ast.astcompiler.compilesyntaxerror--.tree
  - name: " "
  - name: As
  - name: " "
  - uid: Ubytec.Language.Syntax.Model.SyntaxTree
    name: SyntaxTree
    href: Ubytec.Language.Syntax.Model.SyntaxTree.html
  - name: ','
  - name: " "
  - uid: System.ValueTuple{Ubytec.Language.Syntax.Model.SyntaxTree,System.Collections.Generic.List{Ubytec.Language.AST.ASTCompiler.CompileSyntaxError}}.errors
    name: errors
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-ubytec.language.syntax.model.syntaxtree,system.collections.generic.list-ubytec.language.ast.astcompiler.compilesyntaxerror--.errors
  - name: " "
  - name: As
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Ubytec.Language.AST.ASTCompiler
    name: ASTCompiler
    href: Ubytec.Language.AST.ASTCompiler.html
  - name: .
  - uid: Ubytec.Language.AST.ASTCompiler.CompileSyntaxError
    name: CompileSyntaxError
    href: Ubytec.Language.AST.ASTCompiler.CompileSyntaxError.html
  - name: )
  - name: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  name: (T1, T2)
  nameWithType: (T1, T2)
  fullName: (T1, T2)
  spec.csharp:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
  spec.vb:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: Ubytec.Language.Syntax.Model.SyntaxSentence
  commentId: T:Ubytec.Language.Syntax.Model.SyntaxSentence
  parent: Ubytec.Language.Syntax.Model
  href: Ubytec.Language.Syntax.Model.SyntaxSentence.html
  name: SyntaxSentence
  nameWithType: SyntaxSentence
  fullName: Ubytec.Language.Syntax.Model.SyntaxSentence
- uid: Ubytec.Language.Syntax.Model.SyntaxTree.TreeSentenceStack
  commentId: P:Ubytec.Language.Syntax.Model.SyntaxTree.TreeSentenceStack
  href: Ubytec.Language.Syntax.Model.SyntaxTree.TreeSentenceStack.html#Ubytec_Language_Syntax_Model_SyntaxTree_TreeSentenceStack
  name: TreeSentenceStack
  nameWithType: SyntaxTree.TreeSentenceStack
  fullName: Ubytec.Language.Syntax.Model.SyntaxTree.TreeSentenceStack
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.exception
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.NotImplementedException
  commentId: T:System.NotImplementedException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.notimplementedexception
  name: NotImplementedException
  nameWithType: NotImplementedException
  fullName: System.NotImplementedException
- uid: Ubytec.Language.AST.ASTCompiler.BuildSyntaxTree*
  commentId: Overload:Ubytec.Language.AST.ASTCompiler.BuildSyntaxTree
  href: Ubytec.Language.AST.ASTCompiler.BuildSyntaxTree.html#Ubytec_Language_AST_ASTCompiler_BuildSyntaxTree_Ubytec_Language_Syntax_Model_SyntaxTree_Ubytec_Language_Operations_Interfaces_IOpCode_System_Collections_Generic_List_Ubytec_Language_Syntax_Model_SyntaxToken__
  name: BuildSyntaxTree
  nameWithType: ASTCompiler.BuildSyntaxTree
  fullName: Ubytec.Language.AST.ASTCompiler.BuildSyntaxTree
- uid: System.Collections.Generic.List{Ubytec.Language.Syntax.Model.SyntaxToken}
  commentId: T:System.Collections.Generic.List{Ubytec.Language.Syntax.Model.SyntaxToken}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<SyntaxToken>
  nameWithType: List<SyntaxToken>
  fullName: System.Collections.Generic.List<Ubytec.Language.Syntax.Model.SyntaxToken>
  nameWithType.vb: List(Of SyntaxToken)
  fullName.vb: System.Collections.Generic.List(Of Ubytec.Language.Syntax.Model.SyntaxToken)
  name.vb: List(Of SyntaxToken)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Ubytec.Language.Syntax.Model.SyntaxToken
    name: SyntaxToken
    href: Ubytec.Language.Syntax.Model.SyntaxToken.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Ubytec.Language.Syntax.Model.SyntaxToken
    name: SyntaxToken
    href: Ubytec.Language.Syntax.Model.SyntaxToken.html
  - name: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Ubytec.Language.AST.ASTCompiler.CompileAST*
  commentId: Overload:Ubytec.Language.AST.ASTCompiler.CompileAST
  href: Ubytec.Language.AST.ASTCompiler.CompileAST.html#Ubytec_Language_AST_ASTCompiler_CompileAST_Ubytec_Language_Syntax_Model_SyntaxTree_
  name: CompileAST
  nameWithType: ASTCompiler.CompileAST
  fullName: Ubytec.Language.AST.ASTCompiler.CompileAST
- uid: Ubytec.Language.Syntax.Scopes.CompilationScopes
  commentId: T:Ubytec.Language.Syntax.Scopes.CompilationScopes
  parent: Ubytec.Language.Syntax.Scopes
  href: Ubytec.Language.Syntax.Scopes.CompilationScopes.html
  name: CompilationScopes
  nameWithType: CompilationScopes
  fullName: Ubytec.Language.Syntax.Scopes.CompilationScopes
- uid: Ubytec.Language.AST.ASTCompiler.CompileSentence*
  commentId: Overload:Ubytec.Language.AST.ASTCompiler.CompileSentence
  href: Ubytec.Language.AST.ASTCompiler.CompileSentence.html#Ubytec_Language_AST_ASTCompiler_CompileSentence_Ubytec_Language_Syntax_Model_SyntaxSentence_Ubytec_Language_Syntax_Scopes_CompilationScopes_
  name: CompileSentence
  nameWithType: ASTCompiler.CompileSentence
  fullName: Ubytec.Language.AST.ASTCompiler.CompileSentence
- uid: Ubytec.Language.Syntax.Scopes
  commentId: N:Ubytec.Language.Syntax.Scopes
  href: Ubytec.html
  name: Ubytec.Language.Syntax.Scopes
  nameWithType: Ubytec.Language.Syntax.Scopes
  fullName: Ubytec.Language.Syntax.Scopes
  spec.csharp:
  - uid: Ubytec
    name: Ubytec
    href: Ubytec.html
  - name: .
  - uid: Ubytec.Language
    name: Language
    href: Ubytec.Language.html
  - name: .
  - uid: Ubytec.Language.Syntax
    name: Syntax
    href: Ubytec.Language.Syntax.html
  - name: .
  - uid: Ubytec.Language.Syntax.Scopes
    name: Scopes
    href: Ubytec.Language.Syntax.Scopes.html
  spec.vb:
  - uid: Ubytec
    name: Ubytec
    href: Ubytec.html
  - name: .
  - uid: Ubytec.Language
    name: Language
    href: Ubytec.Language.html
  - name: .
  - uid: Ubytec.Language.Syntax
    name: Syntax
    href: Ubytec.Language.Syntax.html
  - name: .
  - uid: Ubytec.Language.Syntax.Scopes
    name: Scopes
    href: Ubytec.Language.Syntax.Scopes.html
- uid: Ubytec.Language.Syntax.Model.SyntaxNode
  commentId: T:Ubytec.Language.Syntax.Model.SyntaxNode
  parent: Ubytec.Language.Syntax.Model
  href: Ubytec.Language.Syntax.Model.SyntaxNode.html
  name: SyntaxNode
  nameWithType: SyntaxNode
  fullName: Ubytec.Language.Syntax.Model.SyntaxNode
- uid: Ubytec.Language.AST.ASTCompiler.CompileBlockNode*
  commentId: Overload:Ubytec.Language.AST.ASTCompiler.CompileBlockNode
  href: Ubytec.Language.AST.ASTCompiler.CompileBlockNode.html#Ubytec_Language_AST_ASTCompiler_CompileBlockNode_Ubytec_Language_Syntax_Model_SyntaxSentence_Ubytec_Language_Syntax_Model_SyntaxNode_Ubytec_Language_Syntax_Scopes_CompilationScopes_
  name: CompileBlockNode
  nameWithType: ASTCompiler.CompileBlockNode
  fullName: Ubytec.Language.AST.ASTCompiler.CompileBlockNode
memberLayout: SeparatePages
