### YamlMime:ManagedReference
items:
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  commentId: T:Ubytec.Language.Tools.SyntaxTokenScopeHelper
  id: SyntaxTokenScopeHelper
  parent: Ubytec.Language.Tools
  children:
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.#ctor(Ubytec.Language.Syntax.Model.SyntaxToken)
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.CommentBlock
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.CommentLineDoubleSlash
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.ConstantBoolean
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.ConstantNumericBinary
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.ConstantNumericDouble
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.ConstantNumericFloat
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.ConstantNumericHex
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.ConstantNumericInt
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameArgument
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameBoolExplicit
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameBoolImplicit
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameField
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameTypeAction
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameTypeClass
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameTypeEnum
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameTypeFunc
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameTypeInterface
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameTypeRecord
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameTypeStruct
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameVarExplicit
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameVarImplicit
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.InvalidIllegal
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsActionLabel
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAdditionOperator
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAngleGrouping
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArgumentName
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArithmeticKeyword
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArray
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayNullableArray
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayNullableBoth
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayNullableItems
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayStructure
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrow
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAssignOperator
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAudioKeyword
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBitwIseKeyword
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBitwiseAndOperator
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBlockStructure
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBooleanConstant
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsClassLabel
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsComma
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsCommentBlock
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsCommentLineDoubleSlash
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsComparIsonKeyword
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsControl(System.String)
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsControlKeyword
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDeclarationKeyword
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDecrementOperator
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDivisionOperator
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDoubleQuotedString
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsEnumLabel
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsEqualityOperator
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExceptionKeyword
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExplicitVarLabel
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExplicitboolLabel
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExponentiationOperator
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFieldLabel
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFlowKeyword
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFuncCallKeyword
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFuncLabel
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsGreaterThanEqualsOperator
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsGreaterThanOperator
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsGroupingStructure
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsHashOperator
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsImplicitVarLabel
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsImplicitboolLabel
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsIncrementOperator
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInequalityOperator
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInlineReturn
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInterfaceLabel
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInvalid
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsJumpKeyword
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsKeyValueSeparator
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLeftShift
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLessThanEqualsOperator
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLessThanOperator
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLogicalAndOperator
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLogicalOrOperator
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsMLKeyword
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsMemoryKeyword
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsModifier
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsModuloOperator
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsMultiplicationOperator
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNegationOperator
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNullableCoalescence
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericBinary
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericDouble
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericFloat
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericHex
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericInt
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsOptionalChaining
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsParentChildSeparator
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPipeInOperator
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPipeOperator
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPipeOutOperator
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPowerKeyword
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsQuantumKeyword
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsRecordLabel
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsRightShift
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSchematizeOperator
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsScopeSeparator
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSecurityKeyword
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSemicolon
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSingle
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSingleNullable
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSingleQuotedString
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSource
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSpreadOperator
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsStackKeyword
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsStorageType
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsStructLabel
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSubtractionOperator
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSyscallKeyword
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSystemKeyword
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsThreadingKeyword
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsUnsignedLeftShift
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsUnsignedRightShift
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsVectorKeyword
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsboolKeyword
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordAudio
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordControl
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordControlDeclaration
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordControlFlow
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordControlJump
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordException
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordFunctionCall
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordMemory
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordMl
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordOperatorArithmetic
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordOperatorBitwIse
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordOperatorComparison
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordPower
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordQuantum
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordSecurity
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordStack
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordStorageBool
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordSyscall
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordSystem
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordThreading
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordVector
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.MetaAngleGrouping
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.MetaArray
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.MetaBlock
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.MetaGrouping
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorAddition
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorAssign
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorBitwiseAnd
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorDecrement
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorDivision
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorEquality
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorExponentiation
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorGreaterThan
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorGreaterThanEquals
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorHash
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorIncrement
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorInequality
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorInlineReturn
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorLeftShift
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorLessThan
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorLessThanEquals
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorLogicalAnd
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorLogicalOr
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorModulo
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorMultiplication
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorNegation
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorNullableCoalescence
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorOptionalChaining
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorPipe
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorPipeIn
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorPipeOut
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorRightShift
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorSchematize
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorSpread
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorSubtraction
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorUnsignedLeftShift
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorUnsignedRightShift
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.PunctuationArrow
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.PunctuationComma
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.PunctuationScope
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.PunctuationSemicolon
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.PunctuationSeparatorKeyValue
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.PunctuationSeparatorParentChild
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.Source
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.StorageModifier
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.StorageTypeArray
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.StorageTypeArrayNullableArray
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.StorageTypeArrayNullableBoth
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.StorageTypeArrayNullableItems
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.StorageTypePrefix
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.StorageTypeSingle
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.StorageTypeSingleNullable
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.StringQuotedDouble
  - Ubytec.Language.Tools.SyntaxTokenScopeHelper.StringQuotedSingle
  langs:
  - csharp
  - vb
  name: SyntaxTokenScopeHelper
  nameWithType: SyntaxTokenScopeHelper
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  type: Class
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: SyntaxTokenScopeHelper
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 14
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: >-
    Provides a strongly-typed helper for checking the scopes of a <xref href="Ubytec.Language.Syntax.Model.SyntaxToken" data-throw-if-not-resolved="false"></xref>.


    This class wraps a <code class="paramref">token</code> and exposes boolean properties for each recognized

    scope in the Ubytec language (e.g., IsNumericInt, IsCommentLineDoubleSlash, IsArrayStructure),

    simplifying parsing and improving code readability by avoiding scattered string checks.
  example: []
  syntax:
    content: public class SyntaxTokenScopeHelper
    content.vb: Public Class SyntaxTokenScopeHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.#ctor(Ubytec.Language.Syntax.Model.SyntaxToken)
  commentId: M:Ubytec.Language.Tools.SyntaxTokenScopeHelper.#ctor(Ubytec.Language.Syntax.Model.SyntaxToken)
  id: '#ctor(Ubytec.Language.Syntax.Model.SyntaxToken)'
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: SyntaxTokenScopeHelper(SyntaxToken)
  nameWithType: SyntaxTokenScopeHelper.SyntaxTokenScopeHelper(SyntaxToken)
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.SyntaxTokenScopeHelper(Ubytec.Language.Syntax.Model.SyntaxToken)
  type: Constructor
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: .ctor
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 14
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: >-
    Provides a strongly-typed helper for checking the scopes of a <xref href="Ubytec.Language.Syntax.Model.SyntaxToken" data-throw-if-not-resolved="false"></xref>.


    This class wraps a <code class="paramref">token</code> and exposes boolean properties for each recognized

    scope in the Ubytec language (e.g., IsNumericInt, IsCommentLineDoubleSlash, IsArrayStructure),

    simplifying parsing and improving code readability by avoiding scattered string checks.
  example: []
  syntax:
    content: public SyntaxTokenScopeHelper(SyntaxToken token)
    parameters:
    - id: token
      type: Ubytec.Language.Syntax.Model.SyntaxToken
      description: The <xref href="Ubytec.Language.Syntax.Model.SyntaxToken" data-throw-if-not-resolved="false"></xref> to analyze. All scope checks will be performed on this token.
    content.vb: Public Sub New(token As SyntaxToken)
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.#ctor*
  nameWithType.vb: SyntaxTokenScopeHelper.New(SyntaxToken)
  fullName.vb: Ubytec.Language.Tools.SyntaxTokenScopeHelper.New(Ubytec.Language.Syntax.Model.SyntaxToken)
  name.vb: New(SyntaxToken)
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.StorageTypePrefix
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.StorageTypePrefix
  id: StorageTypePrefix
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: StorageTypePrefix
  nameWithType: SyntaxTokenScopeHelper.StorageTypePrefix
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.StorageTypePrefix
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: StorageTypePrefix
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 18
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string StorageTypePrefix = "storage.type."
    return:
      type: System.String
    content.vb: Public Const StorageTypePrefix As String = "storage.type."
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.Source
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.Source
  id: Source
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: Source
  nameWithType: SyntaxTokenScopeHelper.Source
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.Source
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: Source
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 21
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string Source = "source.ubytec"
    return:
      type: System.String
    content.vb: Public Const Source As String = "source.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.StorageTypeArrayNullableBoth
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.StorageTypeArrayNullableBoth
  id: StorageTypeArrayNullableBoth
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: StorageTypeArrayNullableBoth
  nameWithType: SyntaxTokenScopeHelper.StorageTypeArrayNullableBoth
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.StorageTypeArrayNullableBoth
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: StorageTypeArrayNullableBoth
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 24
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string StorageTypeArrayNullableBoth = "storage.type.array.nullable-both.ubytec"
    return:
      type: System.String
    content.vb: Public Const StorageTypeArrayNullableBoth As String = "storage.type.array.nullable-both.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.StorageTypeArrayNullableArray
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.StorageTypeArrayNullableArray
  id: StorageTypeArrayNullableArray
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: StorageTypeArrayNullableArray
  nameWithType: SyntaxTokenScopeHelper.StorageTypeArrayNullableArray
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.StorageTypeArrayNullableArray
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: StorageTypeArrayNullableArray
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 25
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string StorageTypeArrayNullableArray = "storage.type.array.nullable-array.ubytec"
    return:
      type: System.String
    content.vb: Public Const StorageTypeArrayNullableArray As String = "storage.type.array.nullable-array.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.StorageTypeArrayNullableItems
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.StorageTypeArrayNullableItems
  id: StorageTypeArrayNullableItems
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: StorageTypeArrayNullableItems
  nameWithType: SyntaxTokenScopeHelper.StorageTypeArrayNullableItems
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.StorageTypeArrayNullableItems
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: StorageTypeArrayNullableItems
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 26
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string StorageTypeArrayNullableItems = "storage.type.array.nullable-items.ubytec"
    return:
      type: System.String
    content.vb: Public Const StorageTypeArrayNullableItems As String = "storage.type.array.nullable-items.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.StorageTypeSingleNullable
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.StorageTypeSingleNullable
  id: StorageTypeSingleNullable
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: StorageTypeSingleNullable
  nameWithType: SyntaxTokenScopeHelper.StorageTypeSingleNullable
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.StorageTypeSingleNullable
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: StorageTypeSingleNullable
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 27
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string StorageTypeSingleNullable = "storage.type.single.nullable.ubytec"
    return:
      type: System.String
    content.vb: Public Const StorageTypeSingleNullable As String = "storage.type.single.nullable.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.StorageTypeSingle
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.StorageTypeSingle
  id: StorageTypeSingle
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: StorageTypeSingle
  nameWithType: SyntaxTokenScopeHelper.StorageTypeSingle
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.StorageTypeSingle
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: StorageTypeSingle
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 28
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string StorageTypeSingle = "storage.type.single.ubytec"
    return:
      type: System.String
    content.vb: Public Const StorageTypeSingle As String = "storage.type.single.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.StorageTypeArray
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.StorageTypeArray
  id: StorageTypeArray
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: StorageTypeArray
  nameWithType: SyntaxTokenScopeHelper.StorageTypeArray
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.StorageTypeArray
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: StorageTypeArray
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 29
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string StorageTypeArray = "storage.type.array.ubytec"
    return:
      type: System.String
    content.vb: Public Const StorageTypeArray As String = "storage.type.array.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.CommentLineDoubleSlash
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.CommentLineDoubleSlash
  id: CommentLineDoubleSlash
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: CommentLineDoubleSlash
  nameWithType: SyntaxTokenScopeHelper.CommentLineDoubleSlash
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.CommentLineDoubleSlash
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: CommentLineDoubleSlash
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 32
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string CommentLineDoubleSlash = "comment.line.double-slash.ubytec"
    return:
      type: System.String
    content.vb: Public Const CommentLineDoubleSlash As String = "comment.line.double-slash.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.CommentBlock
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.CommentBlock
  id: CommentBlock
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: CommentBlock
  nameWithType: SyntaxTokenScopeHelper.CommentBlock
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.CommentBlock
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: CommentBlock
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 33
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string CommentBlock = "comment.block.ubytec"
    return:
      type: System.String
    content.vb: Public Const CommentBlock As String = "comment.block.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.StorageModifier
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.StorageModifier
  id: StorageModifier
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: StorageModifier
  nameWithType: SyntaxTokenScopeHelper.StorageModifier
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.StorageModifier
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: StorageModifier
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 36
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string StorageModifier = "storage.modifier.ubytec"
    return:
      type: System.String
    content.vb: Public Const StorageModifier As String = "storage.modifier.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.ConstantBoolean
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.ConstantBoolean
  id: ConstantBoolean
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: ConstantBoolean
  nameWithType: SyntaxTokenScopeHelper.ConstantBoolean
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.ConstantBoolean
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: ConstantBoolean
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 39
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string ConstantBoolean = "constant.boolean.ubytec"
    return:
      type: System.String
    content.vb: Public Const ConstantBoolean As String = "constant.boolean.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.ConstantNumericFloat
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.ConstantNumericFloat
  id: ConstantNumericFloat
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: ConstantNumericFloat
  nameWithType: SyntaxTokenScopeHelper.ConstantNumericFloat
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.ConstantNumericFloat
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: ConstantNumericFloat
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 40
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string ConstantNumericFloat = "constant.numeric.float.ubytec"
    return:
      type: System.String
    content.vb: Public Const ConstantNumericFloat As String = "constant.numeric.float.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.ConstantNumericDouble
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.ConstantNumericDouble
  id: ConstantNumericDouble
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: ConstantNumericDouble
  nameWithType: SyntaxTokenScopeHelper.ConstantNumericDouble
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.ConstantNumericDouble
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: ConstantNumericDouble
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 41
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string ConstantNumericDouble = "constant.numeric.double.ubytec"
    return:
      type: System.String
    content.vb: Public Const ConstantNumericDouble As String = "constant.numeric.double.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.ConstantNumericInt
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.ConstantNumericInt
  id: ConstantNumericInt
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: ConstantNumericInt
  nameWithType: SyntaxTokenScopeHelper.ConstantNumericInt
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.ConstantNumericInt
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: ConstantNumericInt
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 42
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string ConstantNumericInt = "constant.numeric.int.ubytec"
    return:
      type: System.String
    content.vb: Public Const ConstantNumericInt As String = "constant.numeric.int.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.ConstantNumericHex
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.ConstantNumericHex
  id: ConstantNumericHex
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: ConstantNumericHex
  nameWithType: SyntaxTokenScopeHelper.ConstantNumericHex
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.ConstantNumericHex
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: ConstantNumericHex
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 43
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string ConstantNumericHex = "constant.numeric.hex.ubytec"
    return:
      type: System.String
    content.vb: Public Const ConstantNumericHex As String = "constant.numeric.hex.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.ConstantNumericBinary
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.ConstantNumericBinary
  id: ConstantNumericBinary
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: ConstantNumericBinary
  nameWithType: SyntaxTokenScopeHelper.ConstantNumericBinary
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.ConstantNumericBinary
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: ConstantNumericBinary
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 44
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string ConstantNumericBinary = "constant.numeric.binary.ubytec"
    return:
      type: System.String
    content.vb: Public Const ConstantNumericBinary As String = "constant.numeric.binary.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.MetaArray
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.MetaArray
  id: MetaArray
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: MetaArray
  nameWithType: SyntaxTokenScopeHelper.MetaArray
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.MetaArray
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: MetaArray
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 47
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string MetaArray = "meta.array.ubytec"
    return:
      type: System.String
    content.vb: Public Const MetaArray As String = "meta.array.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.MetaGrouping
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.MetaGrouping
  id: MetaGrouping
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: MetaGrouping
  nameWithType: SyntaxTokenScopeHelper.MetaGrouping
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.MetaGrouping
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: MetaGrouping
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 48
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string MetaGrouping = "meta.grouping.ubytec"
    return:
      type: System.String
    content.vb: Public Const MetaGrouping As String = "meta.grouping.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.MetaBlock
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.MetaBlock
  id: MetaBlock
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: MetaBlock
  nameWithType: SyntaxTokenScopeHelper.MetaBlock
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.MetaBlock
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: MetaBlock
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 49
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string MetaBlock = "meta.block.ubytec"
    return:
      type: System.String
    content.vb: Public Const MetaBlock As String = "meta.block.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.MetaAngleGrouping
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.MetaAngleGrouping
  id: MetaAngleGrouping
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: MetaAngleGrouping
  nameWithType: SyntaxTokenScopeHelper.MetaAngleGrouping
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.MetaAngleGrouping
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: MetaAngleGrouping
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 50
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string MetaAngleGrouping = "meta.angle.grouping.ubytec"
    return:
      type: System.String
    content.vb: Public Const MetaAngleGrouping As String = "meta.angle.grouping.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.StringQuotedDouble
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.StringQuotedDouble
  id: StringQuotedDouble
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: StringQuotedDouble
  nameWithType: SyntaxTokenScopeHelper.StringQuotedDouble
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.StringQuotedDouble
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: StringQuotedDouble
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 53
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string StringQuotedDouble = "string.quoted.double.ubytec"
    return:
      type: System.String
    content.vb: Public Const StringQuotedDouble As String = "string.quoted.double.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.StringQuotedSingle
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.StringQuotedSingle
  id: StringQuotedSingle
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: StringQuotedSingle
  nameWithType: SyntaxTokenScopeHelper.StringQuotedSingle
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.StringQuotedSingle
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: StringQuotedSingle
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 54
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string StringQuotedSingle = "string.quoted.single.ubytec"
    return:
      type: System.String
    content.vb: Public Const StringQuotedSingle As String = "string.quoted.single.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordControlDeclaration
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordControlDeclaration
  id: KeywordControlDeclaration
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: KeywordControlDeclaration
  nameWithType: SyntaxTokenScopeHelper.KeywordControlDeclaration
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordControlDeclaration
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: KeywordControlDeclaration
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 57
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string KeywordControlDeclaration = "keyword.control.declaration.ubytec"
    return:
      type: System.String
    content.vb: Public Const KeywordControlDeclaration As String = "keyword.control.declaration.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordControl
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordControl
  id: KeywordControl
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: KeywordControl
  nameWithType: SyntaxTokenScopeHelper.KeywordControl
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordControl
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: KeywordControl
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 58
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string KeywordControl = "keyword.control.ubytec"
    return:
      type: System.String
    content.vb: Public Const KeywordControl As String = "keyword.control.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordControlFlow
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordControlFlow
  id: KeywordControlFlow
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: KeywordControlFlow
  nameWithType: SyntaxTokenScopeHelper.KeywordControlFlow
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordControlFlow
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: KeywordControlFlow
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 59
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string KeywordControlFlow = "keyword.control.flow.ubytec"
    return:
      type: System.String
    content.vb: Public Const KeywordControlFlow As String = "keyword.control.flow.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordStorageBool
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordStorageBool
  id: KeywordStorageBool
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: KeywordStorageBool
  nameWithType: SyntaxTokenScopeHelper.KeywordStorageBool
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordStorageBool
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: KeywordStorageBool
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 60
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string KeywordStorageBool = "keyword.storage.bool.ubytec"
    return:
      type: System.String
    content.vb: Public Const KeywordStorageBool As String = "keyword.storage.bool.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordStack
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordStack
  id: KeywordStack
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: KeywordStack
  nameWithType: SyntaxTokenScopeHelper.KeywordStack
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordStack
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: KeywordStack
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 61
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string KeywordStack = "keyword.stack.ubytec"
    return:
      type: System.String
    content.vb: Public Const KeywordStack As String = "keyword.stack.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordOperatorArithmetic
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordOperatorArithmetic
  id: KeywordOperatorArithmetic
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: KeywordOperatorArithmetic
  nameWithType: SyntaxTokenScopeHelper.KeywordOperatorArithmetic
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordOperatorArithmetic
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: KeywordOperatorArithmetic
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 62
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string KeywordOperatorArithmetic = "keyword.operator.arithmetic.ubytec"
    return:
      type: System.String
    content.vb: Public Const KeywordOperatorArithmetic As String = "keyword.operator.arithmetic.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordOperatorBitwIse
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordOperatorBitwIse
  id: KeywordOperatorBitwIse
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: KeywordOperatorBitwIse
  nameWithType: SyntaxTokenScopeHelper.KeywordOperatorBitwIse
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordOperatorBitwIse
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: KeywordOperatorBitwIse
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 63
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string KeywordOperatorBitwIse = "keyword.operator.bitwIse.ubytec"
    return:
      type: System.String
    content.vb: Public Const KeywordOperatorBitwIse As String = "keyword.operator.bitwIse.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordOperatorComparison
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordOperatorComparison
  id: KeywordOperatorComparison
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: KeywordOperatorComparison
  nameWithType: SyntaxTokenScopeHelper.KeywordOperatorComparison
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordOperatorComparison
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: KeywordOperatorComparison
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 64
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string KeywordOperatorComparison = "keyword.operator.comparison.ubytec"
    return:
      type: System.String
    content.vb: Public Const KeywordOperatorComparison As String = "keyword.operator.comparison.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordMemory
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordMemory
  id: KeywordMemory
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: KeywordMemory
  nameWithType: SyntaxTokenScopeHelper.KeywordMemory
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordMemory
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: KeywordMemory
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 65
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string KeywordMemory = "keyword.memory.ubytec"
    return:
      type: System.String
    content.vb: Public Const KeywordMemory As String = "keyword.memory.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordControlJump
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordControlJump
  id: KeywordControlJump
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: KeywordControlJump
  nameWithType: SyntaxTokenScopeHelper.KeywordControlJump
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordControlJump
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: KeywordControlJump
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 66
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string KeywordControlJump = "keyword.control.jump.ubytec"
    return:
      type: System.String
    content.vb: Public Const KeywordControlJump As String = "keyword.control.jump.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordFunctionCall
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordFunctionCall
  id: KeywordFunctionCall
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: KeywordFunctionCall
  nameWithType: SyntaxTokenScopeHelper.KeywordFunctionCall
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordFunctionCall
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: KeywordFunctionCall
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 67
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string KeywordFunctionCall = "keyword.function.call.ubytec"
    return:
      type: System.String
    content.vb: Public Const KeywordFunctionCall As String = "keyword.function.call.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordSyscall
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordSyscall
  id: KeywordSyscall
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: KeywordSyscall
  nameWithType: SyntaxTokenScopeHelper.KeywordSyscall
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordSyscall
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: KeywordSyscall
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 68
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string KeywordSyscall = "keyword.syscall.ubytec"
    return:
      type: System.String
    content.vb: Public Const KeywordSyscall As String = "keyword.syscall.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordThreading
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordThreading
  id: KeywordThreading
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: KeywordThreading
  nameWithType: SyntaxTokenScopeHelper.KeywordThreading
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordThreading
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: KeywordThreading
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 69
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string KeywordThreading = "keyword.threading.ubytec"
    return:
      type: System.String
    content.vb: Public Const KeywordThreading As String = "keyword.threading.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordSecurity
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordSecurity
  id: KeywordSecurity
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: KeywordSecurity
  nameWithType: SyntaxTokenScopeHelper.KeywordSecurity
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordSecurity
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: KeywordSecurity
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 70
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string KeywordSecurity = "keyword.security.ubytec"
    return:
      type: System.String
    content.vb: Public Const KeywordSecurity As String = "keyword.security.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordException
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordException
  id: KeywordException
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: KeywordException
  nameWithType: SyntaxTokenScopeHelper.KeywordException
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordException
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: KeywordException
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 71
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string KeywordException = "keyword.exception.ubytec"
    return:
      type: System.String
    content.vb: Public Const KeywordException As String = "keyword.exception.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordVector
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordVector
  id: KeywordVector
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: KeywordVector
  nameWithType: SyntaxTokenScopeHelper.KeywordVector
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordVector
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: KeywordVector
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 72
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string KeywordVector = "keyword.vector.ubytec"
    return:
      type: System.String
    content.vb: Public Const KeywordVector As String = "keyword.vector.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordAudio
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordAudio
  id: KeywordAudio
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: KeywordAudio
  nameWithType: SyntaxTokenScopeHelper.KeywordAudio
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordAudio
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: KeywordAudio
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 73
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string KeywordAudio = "keyword.audio.ubytec"
    return:
      type: System.String
    content.vb: Public Const KeywordAudio As String = "keyword.audio.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordSystem
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordSystem
  id: KeywordSystem
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: KeywordSystem
  nameWithType: SyntaxTokenScopeHelper.KeywordSystem
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordSystem
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: KeywordSystem
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 74
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string KeywordSystem = "keyword.system.ubytec"
    return:
      type: System.String
    content.vb: Public Const KeywordSystem As String = "keyword.system.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordMl
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordMl
  id: KeywordMl
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: KeywordMl
  nameWithType: SyntaxTokenScopeHelper.KeywordMl
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordMl
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: KeywordMl
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 75
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string KeywordMl = "keyword.ml.ubytec"
    return:
      type: System.String
    content.vb: Public Const KeywordMl As String = "keyword.ml.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordPower
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordPower
  id: KeywordPower
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: KeywordPower
  nameWithType: SyntaxTokenScopeHelper.KeywordPower
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordPower
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: KeywordPower
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 76
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string KeywordPower = "keyword.power.ubytec"
    return:
      type: System.String
    content.vb: Public Const KeywordPower As String = "keyword.power.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordQuantum
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordQuantum
  id: KeywordQuantum
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: KeywordQuantum
  nameWithType: SyntaxTokenScopeHelper.KeywordQuantum
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.KeywordQuantum
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: KeywordQuantum
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 77
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string KeywordQuantum = "keyword.quantum.ubytec"
    return:
      type: System.String
    content.vb: Public Const KeywordQuantum As String = "keyword.quantum.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorEquality
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorEquality
  id: OperatorEquality
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: OperatorEquality
  nameWithType: SyntaxTokenScopeHelper.OperatorEquality
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorEquality
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: OperatorEquality
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 80
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string OperatorEquality = "operator.equality.ubytec"
    return:
      type: System.String
    content.vb: Public Const OperatorEquality As String = "operator.equality.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorInequality
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorInequality
  id: OperatorInequality
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: OperatorInequality
  nameWithType: SyntaxTokenScopeHelper.OperatorInequality
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorInequality
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: OperatorInequality
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 81
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string OperatorInequality = "operator.inequality.ubytec"
    return:
      type: System.String
    content.vb: Public Const OperatorInequality As String = "operator.inequality.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorLessThanEquals
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorLessThanEquals
  id: OperatorLessThanEquals
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: OperatorLessThanEquals
  nameWithType: SyntaxTokenScopeHelper.OperatorLessThanEquals
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorLessThanEquals
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: OperatorLessThanEquals
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 82
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string OperatorLessThanEquals = "operator.less-than-equals.ubytec"
    return:
      type: System.String
    content.vb: Public Const OperatorLessThanEquals As String = "operator.less-than-equals.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorGreaterThanEquals
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorGreaterThanEquals
  id: OperatorGreaterThanEquals
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: OperatorGreaterThanEquals
  nameWithType: SyntaxTokenScopeHelper.OperatorGreaterThanEquals
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorGreaterThanEquals
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: OperatorGreaterThanEquals
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 83
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string OperatorGreaterThanEquals = "operator.greater-than-equals.ubytec"
    return:
      type: System.String
    content.vb: Public Const OperatorGreaterThanEquals As String = "operator.greater-than-equals.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorLessThan
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorLessThan
  id: OperatorLessThan
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: OperatorLessThan
  nameWithType: SyntaxTokenScopeHelper.OperatorLessThan
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorLessThan
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: OperatorLessThan
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 84
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string OperatorLessThan = "operator.less-than.ubytec"
    return:
      type: System.String
    content.vb: Public Const OperatorLessThan As String = "operator.less-than.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorGreaterThan
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorGreaterThan
  id: OperatorGreaterThan
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: OperatorGreaterThan
  nameWithType: SyntaxTokenScopeHelper.OperatorGreaterThan
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorGreaterThan
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: OperatorGreaterThan
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 85
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string OperatorGreaterThan = "operator.greater-than.ubytec"
    return:
      type: System.String
    content.vb: Public Const OperatorGreaterThan As String = "operator.greater-than.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorNegation
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorNegation
  id: OperatorNegation
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: OperatorNegation
  nameWithType: SyntaxTokenScopeHelper.OperatorNegation
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorNegation
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: OperatorNegation
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 86
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string OperatorNegation = "operator.negation.ubytec"
    return:
      type: System.String
    content.vb: Public Const OperatorNegation As String = "operator.negation.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorUnsignedRightShift
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorUnsignedRightShift
  id: OperatorUnsignedRightShift
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: OperatorUnsignedRightShift
  nameWithType: SyntaxTokenScopeHelper.OperatorUnsignedRightShift
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorUnsignedRightShift
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: OperatorUnsignedRightShift
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 87
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string OperatorUnsignedRightShift = "operator.unsigned-right-shift.ubytec"
    return:
      type: System.String
    content.vb: Public Const OperatorUnsignedRightShift As String = "operator.unsigned-right-shift.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorUnsignedLeftShift
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorUnsignedLeftShift
  id: OperatorUnsignedLeftShift
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: OperatorUnsignedLeftShift
  nameWithType: SyntaxTokenScopeHelper.OperatorUnsignedLeftShift
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorUnsignedLeftShift
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: OperatorUnsignedLeftShift
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 88
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string OperatorUnsignedLeftShift = "operator.unsigned-left-shift.ubytec"
    return:
      type: System.String
    content.vb: Public Const OperatorUnsignedLeftShift As String = "operator.unsigned-left-shift.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorLeftShift
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorLeftShift
  id: OperatorLeftShift
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: OperatorLeftShift
  nameWithType: SyntaxTokenScopeHelper.OperatorLeftShift
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorLeftShift
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: OperatorLeftShift
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 89
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string OperatorLeftShift = "operator.left-shift.ubytec"
    return:
      type: System.String
    content.vb: Public Const OperatorLeftShift As String = "operator.left-shift.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorRightShift
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorRightShift
  id: OperatorRightShift
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: OperatorRightShift
  nameWithType: SyntaxTokenScopeHelper.OperatorRightShift
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorRightShift
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: OperatorRightShift
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 90
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string OperatorRightShift = "operator.right-shift.ubytec"
    return:
      type: System.String
    content.vb: Public Const OperatorRightShift As String = "operator.right-shift.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorAddition
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorAddition
  id: OperatorAddition
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: OperatorAddition
  nameWithType: SyntaxTokenScopeHelper.OperatorAddition
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorAddition
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: OperatorAddition
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 91
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string OperatorAddition = "operator.addition.ubytec"
    return:
      type: System.String
    content.vb: Public Const OperatorAddition As String = "operator.addition.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorSubtraction
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorSubtraction
  id: OperatorSubtraction
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: OperatorSubtraction
  nameWithType: SyntaxTokenScopeHelper.OperatorSubtraction
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorSubtraction
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: OperatorSubtraction
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 92
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string OperatorSubtraction = "operator.subtraction.ubytec"
    return:
      type: System.String
    content.vb: Public Const OperatorSubtraction As String = "operator.subtraction.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorDivision
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorDivision
  id: OperatorDivision
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: OperatorDivision
  nameWithType: SyntaxTokenScopeHelper.OperatorDivision
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorDivision
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: OperatorDivision
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 93
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string OperatorDivision = "operator.division.ubytec"
    return:
      type: System.String
    content.vb: Public Const OperatorDivision As String = "operator.division.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorMultiplication
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorMultiplication
  id: OperatorMultiplication
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: OperatorMultiplication
  nameWithType: SyntaxTokenScopeHelper.OperatorMultiplication
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorMultiplication
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: OperatorMultiplication
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 94
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string OperatorMultiplication = "operator.multiplication.ubytec"
    return:
      type: System.String
    content.vb: Public Const OperatorMultiplication As String = "operator.multiplication.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorExponentiation
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorExponentiation
  id: OperatorExponentiation
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: OperatorExponentiation
  nameWithType: SyntaxTokenScopeHelper.OperatorExponentiation
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorExponentiation
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: OperatorExponentiation
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 95
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string OperatorExponentiation = "operator.exponentiation.ubytec"
    return:
      type: System.String
    content.vb: Public Const OperatorExponentiation As String = "operator.exponentiation.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorModulo
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorModulo
  id: OperatorModulo
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: OperatorModulo
  nameWithType: SyntaxTokenScopeHelper.OperatorModulo
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorModulo
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: OperatorModulo
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 96
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string OperatorModulo = "operator.modulo.ubytec"
    return:
      type: System.String
    content.vb: Public Const OperatorModulo As String = "operator.modulo.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorBitwiseAnd
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorBitwiseAnd
  id: OperatorBitwiseAnd
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: OperatorBitwiseAnd
  nameWithType: SyntaxTokenScopeHelper.OperatorBitwiseAnd
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorBitwiseAnd
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: OperatorBitwiseAnd
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 97
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string OperatorBitwiseAnd = "operator.bitwise-and.ubytec"
    return:
      type: System.String
    content.vb: Public Const OperatorBitwiseAnd As String = "operator.bitwise-and.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorHash
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorHash
  id: OperatorHash
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: OperatorHash
  nameWithType: SyntaxTokenScopeHelper.OperatorHash
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorHash
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: OperatorHash
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 98
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string OperatorHash = "operator.hash.ubytec"
    return:
      type: System.String
    content.vb: Public Const OperatorHash As String = "operator.hash.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorIncrement
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorIncrement
  id: OperatorIncrement
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: OperatorIncrement
  nameWithType: SyntaxTokenScopeHelper.OperatorIncrement
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorIncrement
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: OperatorIncrement
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 99
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string OperatorIncrement = "operator.increment.ubytec"
    return:
      type: System.String
    content.vb: Public Const OperatorIncrement As String = "operator.increment.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorDecrement
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorDecrement
  id: OperatorDecrement
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: OperatorDecrement
  nameWithType: SyntaxTokenScopeHelper.OperatorDecrement
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorDecrement
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: OperatorDecrement
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 100
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string OperatorDecrement = "operator.decrement.ubytec"
    return:
      type: System.String
    content.vb: Public Const OperatorDecrement As String = "operator.decrement.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorLogicalAnd
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorLogicalAnd
  id: OperatorLogicalAnd
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: OperatorLogicalAnd
  nameWithType: SyntaxTokenScopeHelper.OperatorLogicalAnd
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorLogicalAnd
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: OperatorLogicalAnd
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 101
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string OperatorLogicalAnd = "operator.logical-and.ubytec"
    return:
      type: System.String
    content.vb: Public Const OperatorLogicalAnd As String = "operator.logical-and.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorLogicalOr
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorLogicalOr
  id: OperatorLogicalOr
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: OperatorLogicalOr
  nameWithType: SyntaxTokenScopeHelper.OperatorLogicalOr
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorLogicalOr
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: OperatorLogicalOr
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 102
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string OperatorLogicalOr = "operator.logical-or.ubytec"
    return:
      type: System.String
    content.vb: Public Const OperatorLogicalOr As String = "operator.logical-or.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorOptionalChaining
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorOptionalChaining
  id: OperatorOptionalChaining
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: OperatorOptionalChaining
  nameWithType: SyntaxTokenScopeHelper.OperatorOptionalChaining
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorOptionalChaining
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: OperatorOptionalChaining
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 103
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string OperatorOptionalChaining = "operator.optional-chaining.ubytec"
    return:
      type: System.String
    content.vb: Public Const OperatorOptionalChaining As String = "operator.optional-chaining.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorPipe
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorPipe
  id: OperatorPipe
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: OperatorPipe
  nameWithType: SyntaxTokenScopeHelper.OperatorPipe
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorPipe
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: OperatorPipe
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 104
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string OperatorPipe = "operator.pipe.ubytec"
    return:
      type: System.String
    content.vb: Public Const OperatorPipe As String = "operator.pipe.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorPipeIn
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorPipeIn
  id: OperatorPipeIn
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: OperatorPipeIn
  nameWithType: SyntaxTokenScopeHelper.OperatorPipeIn
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorPipeIn
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: OperatorPipeIn
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 105
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string OperatorPipeIn = "operator.pipe-in.ubytec"
    return:
      type: System.String
    content.vb: Public Const OperatorPipeIn As String = "operator.pipe-in.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorPipeOut
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorPipeOut
  id: OperatorPipeOut
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: OperatorPipeOut
  nameWithType: SyntaxTokenScopeHelper.OperatorPipeOut
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorPipeOut
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: OperatorPipeOut
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 106
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string OperatorPipeOut = "operator.pipe-out.ubytec"
    return:
      type: System.String
    content.vb: Public Const OperatorPipeOut As String = "operator.pipe-out.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorNullableCoalescence
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorNullableCoalescence
  id: OperatorNullableCoalescence
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: OperatorNullableCoalescence
  nameWithType: SyntaxTokenScopeHelper.OperatorNullableCoalescence
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorNullableCoalescence
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: OperatorNullableCoalescence
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 107
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string OperatorNullableCoalescence = "operator.nullable-coalescence.ubytec"
    return:
      type: System.String
    content.vb: Public Const OperatorNullableCoalescence As String = "operator.nullable-coalescence.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorSpread
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorSpread
  id: OperatorSpread
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: OperatorSpread
  nameWithType: SyntaxTokenScopeHelper.OperatorSpread
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorSpread
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: OperatorSpread
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 108
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string OperatorSpread = "operator.spread.ubytec"
    return:
      type: System.String
    content.vb: Public Const OperatorSpread As String = "operator.spread.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorSchematize
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorSchematize
  id: OperatorSchematize
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: OperatorSchematize
  nameWithType: SyntaxTokenScopeHelper.OperatorSchematize
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorSchematize
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: OperatorSchematize
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 109
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string OperatorSchematize = "operator.schematize.ubytec"
    return:
      type: System.String
    content.vb: Public Const OperatorSchematize As String = "operator.schematize.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorAssign
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorAssign
  id: OperatorAssign
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: OperatorAssign
  nameWithType: SyntaxTokenScopeHelper.OperatorAssign
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorAssign
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: OperatorAssign
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 110
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string OperatorAssign = "operator.assign.ubytec"
    return:
      type: System.String
    content.vb: Public Const OperatorAssign As String = "operator.assign.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorInlineReturn
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorInlineReturn
  id: OperatorInlineReturn
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: OperatorInlineReturn
  nameWithType: SyntaxTokenScopeHelper.OperatorInlineReturn
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.OperatorInlineReturn
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: OperatorInlineReturn
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 111
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string OperatorInlineReturn = "operator.inline-return.ubytec"
    return:
      type: System.String
    content.vb: Public Const OperatorInlineReturn As String = "operator.inline-return.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.PunctuationComma
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.PunctuationComma
  id: PunctuationComma
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: PunctuationComma
  nameWithType: SyntaxTokenScopeHelper.PunctuationComma
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.PunctuationComma
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: PunctuationComma
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 114
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string PunctuationComma = "punctuation.comma.ubytec"
    return:
      type: System.String
    content.vb: Public Const PunctuationComma As String = "punctuation.comma.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.PunctuationSeparatorKeyValue
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.PunctuationSeparatorKeyValue
  id: PunctuationSeparatorKeyValue
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: PunctuationSeparatorKeyValue
  nameWithType: SyntaxTokenScopeHelper.PunctuationSeparatorKeyValue
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.PunctuationSeparatorKeyValue
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: PunctuationSeparatorKeyValue
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 115
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string PunctuationSeparatorKeyValue = "punctuation.separator.key-value.ubytec"
    return:
      type: System.String
    content.vb: Public Const PunctuationSeparatorKeyValue As String = "punctuation.separator.key-value.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.PunctuationScope
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.PunctuationScope
  id: PunctuationScope
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: PunctuationScope
  nameWithType: SyntaxTokenScopeHelper.PunctuationScope
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.PunctuationScope
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: PunctuationScope
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 116
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string PunctuationScope = "punctuation.scope.ubytec"
    return:
      type: System.String
    content.vb: Public Const PunctuationScope As String = "punctuation.scope.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.PunctuationSeparatorParentChild
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.PunctuationSeparatorParentChild
  id: PunctuationSeparatorParentChild
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: PunctuationSeparatorParentChild
  nameWithType: SyntaxTokenScopeHelper.PunctuationSeparatorParentChild
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.PunctuationSeparatorParentChild
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: PunctuationSeparatorParentChild
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 117
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string PunctuationSeparatorParentChild = "punctuation.separator.parent-child.ubytec"
    return:
      type: System.String
    content.vb: Public Const PunctuationSeparatorParentChild As String = "punctuation.separator.parent-child.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.PunctuationSemicolon
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.PunctuationSemicolon
  id: PunctuationSemicolon
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: PunctuationSemicolon
  nameWithType: SyntaxTokenScopeHelper.PunctuationSemicolon
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.PunctuationSemicolon
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: PunctuationSemicolon
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 118
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string PunctuationSemicolon = "punctuation.semicolon.ubytec"
    return:
      type: System.String
    content.vb: Public Const PunctuationSemicolon As String = "punctuation.semicolon.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.PunctuationArrow
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.PunctuationArrow
  id: PunctuationArrow
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: PunctuationArrow
  nameWithType: SyntaxTokenScopeHelper.PunctuationArrow
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.PunctuationArrow
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: PunctuationArrow
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 119
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string PunctuationArrow = "punctuation.arrow.ubytec"
    return:
      type: System.String
    content.vb: Public Const PunctuationArrow As String = "punctuation.arrow.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameArgument
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameArgument
  id: EntityNameArgument
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: EntityNameArgument
  nameWithType: SyntaxTokenScopeHelper.EntityNameArgument
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameArgument
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: EntityNameArgument
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 122
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string EntityNameArgument = "entity.name.argument.ubytec"
    return:
      type: System.String
    content.vb: Public Const EntityNameArgument As String = "entity.name.argument.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameTypeClass
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameTypeClass
  id: EntityNameTypeClass
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: EntityNameTypeClass
  nameWithType: SyntaxTokenScopeHelper.EntityNameTypeClass
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameTypeClass
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: EntityNameTypeClass
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 125
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string EntityNameTypeClass = "entity.name.type.class.ubytec"
    return:
      type: System.String
    content.vb: Public Const EntityNameTypeClass As String = "entity.name.type.class.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameTypeRecord
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameTypeRecord
  id: EntityNameTypeRecord
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: EntityNameTypeRecord
  nameWithType: SyntaxTokenScopeHelper.EntityNameTypeRecord
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameTypeRecord
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: EntityNameTypeRecord
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 126
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string EntityNameTypeRecord = "entity.name.type.record.ubytec"
    return:
      type: System.String
    content.vb: Public Const EntityNameTypeRecord As String = "entity.name.type.record.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameTypeStruct
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameTypeStruct
  id: EntityNameTypeStruct
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: EntityNameTypeStruct
  nameWithType: SyntaxTokenScopeHelper.EntityNameTypeStruct
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameTypeStruct
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: EntityNameTypeStruct
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 127
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string EntityNameTypeStruct = "entity.name.type.struct.ubytec"
    return:
      type: System.String
    content.vb: Public Const EntityNameTypeStruct As String = "entity.name.type.struct.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameTypeEnum
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameTypeEnum
  id: EntityNameTypeEnum
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: EntityNameTypeEnum
  nameWithType: SyntaxTokenScopeHelper.EntityNameTypeEnum
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameTypeEnum
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: EntityNameTypeEnum
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 128
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string EntityNameTypeEnum = "entity.name.type.enum.ubytec"
    return:
      type: System.String
    content.vb: Public Const EntityNameTypeEnum As String = "entity.name.type.enum.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameTypeInterface
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameTypeInterface
  id: EntityNameTypeInterface
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: EntityNameTypeInterface
  nameWithType: SyntaxTokenScopeHelper.EntityNameTypeInterface
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameTypeInterface
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: EntityNameTypeInterface
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 129
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string EntityNameTypeInterface = "entity.name.type.interface.ubytec"
    return:
      type: System.String
    content.vb: Public Const EntityNameTypeInterface As String = "entity.name.type.interface.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameTypeAction
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameTypeAction
  id: EntityNameTypeAction
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: EntityNameTypeAction
  nameWithType: SyntaxTokenScopeHelper.EntityNameTypeAction
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameTypeAction
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: EntityNameTypeAction
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 130
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string EntityNameTypeAction = "entity.name.type.action.ubytec"
    return:
      type: System.String
    content.vb: Public Const EntityNameTypeAction As String = "entity.name.type.action.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameTypeFunc
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameTypeFunc
  id: EntityNameTypeFunc
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: EntityNameTypeFunc
  nameWithType: SyntaxTokenScopeHelper.EntityNameTypeFunc
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameTypeFunc
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: EntityNameTypeFunc
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 131
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string EntityNameTypeFunc = "entity.name.type.func.ubytec"
    return:
      type: System.String
    content.vb: Public Const EntityNameTypeFunc As String = "entity.name.type.func.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameBoolImplicit
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameBoolImplicit
  id: EntityNameBoolImplicit
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: EntityNameBoolImplicit
  nameWithType: SyntaxTokenScopeHelper.EntityNameBoolImplicit
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameBoolImplicit
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: EntityNameBoolImplicit
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 132
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string EntityNameBoolImplicit = "entity.name.bool.implicit.ubytec"
    return:
      type: System.String
    content.vb: Public Const EntityNameBoolImplicit As String = "entity.name.bool.implicit.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameField
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameField
  id: EntityNameField
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: EntityNameField
  nameWithType: SyntaxTokenScopeHelper.EntityNameField
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameField
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: EntityNameField
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 133
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string EntityNameField = "entity.name.field.ubytec"
    return:
      type: System.String
    content.vb: Public Const EntityNameField As String = "entity.name.field.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameBoolExplicit
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameBoolExplicit
  id: EntityNameBoolExplicit
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: EntityNameBoolExplicit
  nameWithType: SyntaxTokenScopeHelper.EntityNameBoolExplicit
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameBoolExplicit
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: EntityNameBoolExplicit
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 134
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string EntityNameBoolExplicit = "entity.name.bool.explicit.ubytec"
    return:
      type: System.String
    content.vb: Public Const EntityNameBoolExplicit As String = "entity.name.bool.explicit.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameVarImplicit
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameVarImplicit
  id: EntityNameVarImplicit
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: EntityNameVarImplicit
  nameWithType: SyntaxTokenScopeHelper.EntityNameVarImplicit
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameVarImplicit
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: EntityNameVarImplicit
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 135
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string EntityNameVarImplicit = "entity.name.var.implicit.ubytec"
    return:
      type: System.String
    content.vb: Public Const EntityNameVarImplicit As String = "entity.name.var.implicit.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameVarExplicit
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameVarExplicit
  id: EntityNameVarExplicit
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: EntityNameVarExplicit
  nameWithType: SyntaxTokenScopeHelper.EntityNameVarExplicit
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.EntityNameVarExplicit
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: EntityNameVarExplicit
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 136
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string EntityNameVarExplicit = "entity.name.var.explicit.ubytec"
    return:
      type: System.String
    content.vb: Public Const EntityNameVarExplicit As String = "entity.name.var.explicit.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.InvalidIllegal
  commentId: F:Ubytec.Language.Tools.SyntaxTokenScopeHelper.InvalidIllegal
  id: InvalidIllegal
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: InvalidIllegal
  nameWithType: SyntaxTokenScopeHelper.InvalidIllegal
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.InvalidIllegal
  type: Field
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: InvalidIllegal
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 138
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public const string InvalidIllegal = "invalid.illegal.ubytec"
    return:
      type: System.String
    content.vb: Public Const InvalidIllegal As String = "invalid.illegal.ubytec"
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsControl(System.String)
  commentId: M:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsControl(System.String)
  id: IsControl(System.String)
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsControl(string)
  nameWithType: SyntaxTokenScopeHelper.IsControl(string)
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsControl(string)
  type: Method
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsControl
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 141
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public bool IsControl(string kw)
    parameters:
    - id: kw
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function IsControl(kw As String) As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsControl*
  nameWithType.vb: SyntaxTokenScopeHelper.IsControl(String)
  fullName.vb: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsControl(String)
  name.vb: IsControl(String)
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSource
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSource
  id: IsSource
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsSource
  nameWithType: SyntaxTokenScopeHelper.IsSource
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSource
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsSource
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 143
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is ubytec source code. Most
  example: []
  syntax:
    content: public bool IsSource { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsSource As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSource*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayNullableBoth
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayNullableBoth
  id: IsArrayNullableBoth
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsArrayNullableBoth
  nameWithType: SyntaxTokenScopeHelper.IsArrayNullableBoth
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayNullableBoth
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsArrayNullableBoth
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 147
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token represents an array with both the array itself and its elements nullable (e.g., <code>[Type?]?</code>).
  example: []
  syntax:
    content: public bool IsArrayNullableBoth { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsArrayNullableBoth As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayNullableBoth*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayNullableArray
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayNullableArray
  id: IsArrayNullableArray
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsArrayNullableArray
  nameWithType: SyntaxTokenScopeHelper.IsArrayNullableArray
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayNullableArray
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsArrayNullableArray
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 150
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token represents an array that can be null as a whole (e.g., <code>[Type]?</code>).
  example: []
  syntax:
    content: public bool IsArrayNullableArray { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsArrayNullableArray As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayNullableArray*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayNullableItems
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayNullableItems
  id: IsArrayNullableItems
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsArrayNullableItems
  nameWithType: SyntaxTokenScopeHelper.IsArrayNullableItems
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayNullableItems
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsArrayNullableItems
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 153
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token represents an array where the elements can be null (e.g., <code>[Type?]</code>).
  example: []
  syntax:
    content: public bool IsArrayNullableItems { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsArrayNullableItems As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayNullableItems*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSingleNullable
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSingleNullable
  id: IsSingleNullable
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsSingleNullable
  nameWithType: SyntaxTokenScopeHelper.IsSingleNullable
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSingleNullable
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsSingleNullable
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 156
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token represents a nullable single value type (e.g., <code>int?</code>).
  example: []
  syntax:
    content: public bool IsSingleNullable { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsSingleNullable As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSingleNullable*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSingle
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSingle
  id: IsSingle
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsSingle
  nameWithType: SyntaxTokenScopeHelper.IsSingle
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSingle
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsSingle
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 159
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token represents a non-nullable single value type.
  example: []
  syntax:
    content: public bool IsSingle { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsSingle As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSingle*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArray
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArray
  id: IsArray
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsArray
  nameWithType: SyntaxTokenScopeHelper.IsArray
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArray
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsArray
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 162
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token represents an array type without nullability.
  example: []
  syntax:
    content: public bool IsArray { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsArray As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArray*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsCommentLineDoubleSlash
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsCommentLineDoubleSlash
  id: IsCommentLineDoubleSlash
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsCommentLineDoubleSlash
  nameWithType: SyntaxTokenScopeHelper.IsCommentLineDoubleSlash
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsCommentLineDoubleSlash
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsCommentLineDoubleSlash
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 167
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token represents a line comment starting with double slashes (//).
  example: []
  syntax:
    content: public bool IsCommentLineDoubleSlash { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsCommentLineDoubleSlash As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsCommentLineDoubleSlash*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsCommentBlock
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsCommentBlock
  id: IsCommentBlock
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsCommentBlock
  nameWithType: SyntaxTokenScopeHelper.IsCommentBlock
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsCommentBlock
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsCommentBlock
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 170
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token represents a block comment (e.g., /* ... */).
  example: []
  syntax:
    content: public bool IsCommentBlock { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsCommentBlock As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsCommentBlock*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsModifier
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsModifier
  id: IsModifier
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsModifier
  nameWithType: SyntaxTokenScopeHelper.IsModifier
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsModifier
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsModifier
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 175
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token represents a modifier keyword (e.g., <code>public</code>, <code>private</code>, <code>const</code>).
  example: []
  syntax:
    content: public bool IsModifier { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsModifier As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsModifier*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsStorageType
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsStorageType
  id: IsStorageType
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsStorageType
  nameWithType: SyntaxTokenScopeHelper.IsStorageType
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsStorageType
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsStorageType
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 177
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token represents a storage keyword (e.g., <code>Type</code>, <code>Type?</code>, <code>[Type]</code>, <code>[Type?]</code>, <code>[Type]?</code>, <code>[Type?]?</code> ).
  example: []
  syntax:
    content: public bool IsStorageType { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsStorageType As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsStorageType*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBooleanConstant
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBooleanConstant
  id: IsBooleanConstant
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsBooleanConstant
  nameWithType: SyntaxTokenScopeHelper.IsBooleanConstant
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBooleanConstant
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsBooleanConstant
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 182
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token represents a boolean constant literal (<code>true</code> or <code>false</code>).
  example: []
  syntax:
    content: public bool IsBooleanConstant { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsBooleanConstant As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBooleanConstant*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericFloat
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericFloat
  id: IsNumericFloat
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsNumericFloat
  nameWithType: SyntaxTokenScopeHelper.IsNumericFloat
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericFloat
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsNumericFloat
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 185
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token represents a floating-point constant.
  example: []
  syntax:
    content: public bool IsNumericFloat { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsNumericFloat As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericFloat*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericDouble
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericDouble
  id: IsNumericDouble
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsNumericDouble
  nameWithType: SyntaxTokenScopeHelper.IsNumericDouble
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericDouble
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsNumericDouble
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 188
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token represents a double-precision floating-point constant.
  example: []
  syntax:
    content: public bool IsNumericDouble { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsNumericDouble As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericDouble*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericInt
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericInt
  id: IsNumericInt
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsNumericInt
  nameWithType: SyntaxTokenScopeHelper.IsNumericInt
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericInt
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsNumericInt
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 191
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token represents an integer constant.
  example: []
  syntax:
    content: public bool IsNumericInt { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsNumericInt As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericInt*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericHex
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericHex
  id: IsNumericHex
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsNumericHex
  nameWithType: SyntaxTokenScopeHelper.IsNumericHex
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericHex
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsNumericHex
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 194
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token represents a hexadecimal numeric constant.
  example: []
  syntax:
    content: public bool IsNumericHex { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsNumericHex As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericHex*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericBinary
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericBinary
  id: IsNumericBinary
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsNumericBinary
  nameWithType: SyntaxTokenScopeHelper.IsNumericBinary
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericBinary
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsNumericBinary
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 197
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token represents a binary numeric constant.
  example: []
  syntax:
    content: public bool IsNumericBinary { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsNumericBinary As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericBinary*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayStructure
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayStructure
  id: IsArrayStructure
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsArrayStructure
  nameWithType: SyntaxTokenScopeHelper.IsArrayStructure
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayStructure
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsArrayStructure
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 202
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token represents an array structure or literal (e.g., <code>[ "hello", "world" ]</code>).
  example: []
  syntax:
    content: public bool IsArrayStructure { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsArrayStructure As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayStructure*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsGroupingStructure
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsGroupingStructure
  id: IsGroupingStructure
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsGroupingStructure
  nameWithType: SyntaxTokenScopeHelper.IsGroupingStructure
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsGroupingStructure
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsGroupingStructure
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 205
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token represents a grouping structure with parentheses (e.g., <code>( 10 )</code>).
  example: []
  syntax:
    content: public bool IsGroupingStructure { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsGroupingStructure As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsGroupingStructure*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBlockStructure
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBlockStructure
  id: IsBlockStructure
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsBlockStructure
  nameWithType: SyntaxTokenScopeHelper.IsBlockStructure
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBlockStructure
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsBlockStructure
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 208
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token represents a block structure with curly braces (e.g., <code>{ ... }</code>).
  example: []
  syntax:
    content: public bool IsBlockStructure { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsBlockStructure As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBlockStructure*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAngleGrouping
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAngleGrouping
  id: IsAngleGrouping
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsAngleGrouping
  nameWithType: SyntaxTokenScopeHelper.IsAngleGrouping
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAngleGrouping
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsAngleGrouping
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 211
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token represents an angle bracket grouping (e.g., <code>&lt;T&gt;</code>).
  example: []
  syntax:
    content: public bool IsAngleGrouping { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsAngleGrouping As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAngleGrouping*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDoubleQuotedString
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDoubleQuotedString
  id: IsDoubleQuotedString
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsDoubleQuotedString
  nameWithType: SyntaxTokenScopeHelper.IsDoubleQuotedString
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDoubleQuotedString
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsDoubleQuotedString
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 216
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token represents a double-quoted string literal (e.g., <code>"text"</code>).
  example: []
  syntax:
    content: public bool IsDoubleQuotedString { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsDoubleQuotedString As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDoubleQuotedString*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSingleQuotedString
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSingleQuotedString
  id: IsSingleQuotedString
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsSingleQuotedString
  nameWithType: SyntaxTokenScopeHelper.IsSingleQuotedString
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSingleQuotedString
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsSingleQuotedString
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 219
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token represents a single-quoted string or character literal (e.g., <code>'c'</code>).
  example: []
  syntax:
    content: public bool IsSingleQuotedString { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsSingleQuotedString As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSingleQuotedString*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDeclarationKeyword
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDeclarationKeyword
  id: IsDeclarationKeyword
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsDeclarationKeyword
  nameWithType: SyntaxTokenScopeHelper.IsDeclarationKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDeclarationKeyword
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsDeclarationKeyword
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 224
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a declaration keyword (e.g., <code>let</code>, <code>var</code>).
  example: []
  syntax:
    content: public bool IsDeclarationKeyword { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsDeclarationKeyword As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDeclarationKeyword*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsControlKeyword
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsControlKeyword
  id: IsControlKeyword
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsControlKeyword
  nameWithType: SyntaxTokenScopeHelper.IsControlKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsControlKeyword
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsControlKeyword
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 227
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a general control keyword.
  example: []
  syntax:
    content: public bool IsControlKeyword { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsControlKeyword As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsControlKeyword*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFlowKeyword
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFlowKeyword
  id: IsFlowKeyword
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsFlowKeyword
  nameWithType: SyntaxTokenScopeHelper.IsFlowKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFlowKeyword
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsFlowKeyword
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 230
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a control flow keyword (e.g., <code>if</code>, <code>while</code>).
  example: []
  syntax:
    content: public bool IsFlowKeyword { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsFlowKeyword As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFlowKeyword*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsboolKeyword
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsboolKeyword
  id: IsboolKeyword
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsboolKeyword
  nameWithType: SyntaxTokenScopeHelper.IsboolKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsboolKeyword
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsboolKeyword
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 233
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a boolean type keyword.
  example: []
  syntax:
    content: public bool IsboolKeyword { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsboolKeyword As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsboolKeyword*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsStackKeyword
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsStackKeyword
  id: IsStackKeyword
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsStackKeyword
  nameWithType: SyntaxTokenScopeHelper.IsStackKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsStackKeyword
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsStackKeyword
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 236
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a stack operation keyword.
  example: []
  syntax:
    content: public bool IsStackKeyword { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsStackKeyword As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsStackKeyword*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArithmeticKeyword
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArithmeticKeyword
  id: IsArithmeticKeyword
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsArithmeticKeyword
  nameWithType: SyntaxTokenScopeHelper.IsArithmeticKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArithmeticKeyword
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsArithmeticKeyword
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 239
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is an arithmetic operator keyword.
  example: []
  syntax:
    content: public bool IsArithmeticKeyword { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsArithmeticKeyword As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArithmeticKeyword*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBitwIseKeyword
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBitwIseKeyword
  id: IsBitwIseKeyword
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsBitwIseKeyword
  nameWithType: SyntaxTokenScopeHelper.IsBitwIseKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBitwIseKeyword
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsBitwIseKeyword
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 242
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a bitwise operator keyword.
  example: []
  syntax:
    content: public bool IsBitwIseKeyword { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsBitwIseKeyword As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBitwIseKeyword*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsComparIsonKeyword
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsComparIsonKeyword
  id: IsComparIsonKeyword
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsComparIsonKeyword
  nameWithType: SyntaxTokenScopeHelper.IsComparIsonKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsComparIsonKeyword
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsComparIsonKeyword
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 245
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a comparison operator keyword.
  example: []
  syntax:
    content: public bool IsComparIsonKeyword { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsComparIsonKeyword As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsComparIsonKeyword*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsMemoryKeyword
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsMemoryKeyword
  id: IsMemoryKeyword
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsMemoryKeyword
  nameWithType: SyntaxTokenScopeHelper.IsMemoryKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsMemoryKeyword
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsMemoryKeyword
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 248
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a memory operation keyword.
  example: []
  syntax:
    content: public bool IsMemoryKeyword { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsMemoryKeyword As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsMemoryKeyword*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsJumpKeyword
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsJumpKeyword
  id: IsJumpKeyword
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsJumpKeyword
  nameWithType: SyntaxTokenScopeHelper.IsJumpKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsJumpKeyword
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsJumpKeyword
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 251
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a jump control keyword (e.g., <code>goto</code>).
  example: []
  syntax:
    content: public bool IsJumpKeyword { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsJumpKeyword As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsJumpKeyword*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFuncCallKeyword
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFuncCallKeyword
  id: IsFuncCallKeyword
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsFuncCallKeyword
  nameWithType: SyntaxTokenScopeHelper.IsFuncCallKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFuncCallKeyword
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsFuncCallKeyword
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 254
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a function call keyword.
  example: []
  syntax:
    content: public bool IsFuncCallKeyword { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsFuncCallKeyword As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFuncCallKeyword*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSyscallKeyword
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSyscallKeyword
  id: IsSyscallKeyword
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsSyscallKeyword
  nameWithType: SyntaxTokenScopeHelper.IsSyscallKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSyscallKeyword
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsSyscallKeyword
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 257
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a system call keyword.
  example: []
  syntax:
    content: public bool IsSyscallKeyword { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsSyscallKeyword As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSyscallKeyword*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsThreadingKeyword
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsThreadingKeyword
  id: IsThreadingKeyword
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsThreadingKeyword
  nameWithType: SyntaxTokenScopeHelper.IsThreadingKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsThreadingKeyword
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsThreadingKeyword
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 260
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a threading operation keyword.
  example: []
  syntax:
    content: public bool IsThreadingKeyword { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsThreadingKeyword As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsThreadingKeyword*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSecurityKeyword
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSecurityKeyword
  id: IsSecurityKeyword
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsSecurityKeyword
  nameWithType: SyntaxTokenScopeHelper.IsSecurityKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSecurityKeyword
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsSecurityKeyword
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 263
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a security-related keyword.
  example: []
  syntax:
    content: public bool IsSecurityKeyword { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsSecurityKeyword As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSecurityKeyword*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExceptionKeyword
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExceptionKeyword
  id: IsExceptionKeyword
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsExceptionKeyword
  nameWithType: SyntaxTokenScopeHelper.IsExceptionKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExceptionKeyword
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsExceptionKeyword
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 266
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is an exception handling keyword.
  example: []
  syntax:
    content: public bool IsExceptionKeyword { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsExceptionKeyword As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExceptionKeyword*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsVectorKeyword
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsVectorKeyword
  id: IsVectorKeyword
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsVectorKeyword
  nameWithType: SyntaxTokenScopeHelper.IsVectorKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsVectorKeyword
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsVectorKeyword
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 269
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a vector operation keyword.
  example: []
  syntax:
    content: public bool IsVectorKeyword { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsVectorKeyword As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsVectorKeyword*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAudioKeyword
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAudioKeyword
  id: IsAudioKeyword
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsAudioKeyword
  nameWithType: SyntaxTokenScopeHelper.IsAudioKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAudioKeyword
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsAudioKeyword
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 272
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is an audio operation keyword.
  example: []
  syntax:
    content: public bool IsAudioKeyword { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsAudioKeyword As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAudioKeyword*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSystemKeyword
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSystemKeyword
  id: IsSystemKeyword
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsSystemKeyword
  nameWithType: SyntaxTokenScopeHelper.IsSystemKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSystemKeyword
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsSystemKeyword
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 275
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a system operation keyword.
  example: []
  syntax:
    content: public bool IsSystemKeyword { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsSystemKeyword As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSystemKeyword*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsMLKeyword
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsMLKeyword
  id: IsMLKeyword
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsMLKeyword
  nameWithType: SyntaxTokenScopeHelper.IsMLKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsMLKeyword
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsMLKeyword
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 278
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a machine learning keyword.
  example: []
  syntax:
    content: public bool IsMLKeyword { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsMLKeyword As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsMLKeyword*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPowerKeyword
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPowerKeyword
  id: IsPowerKeyword
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsPowerKeyword
  nameWithType: SyntaxTokenScopeHelper.IsPowerKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPowerKeyword
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsPowerKeyword
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 281
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a power or energy-related keyword.
  example: []
  syntax:
    content: public bool IsPowerKeyword { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsPowerKeyword As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPowerKeyword*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsQuantumKeyword
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsQuantumKeyword
  id: IsQuantumKeyword
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsQuantumKeyword
  nameWithType: SyntaxTokenScopeHelper.IsQuantumKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsQuantumKeyword
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsQuantumKeyword
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 284
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a quantum computing keyword.
  example: []
  syntax:
    content: public bool IsQuantumKeyword { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsQuantumKeyword As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsQuantumKeyword*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsEqualityOperator
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsEqualityOperator
  id: IsEqualityOperator
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsEqualityOperator
  nameWithType: SyntaxTokenScopeHelper.IsEqualityOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsEqualityOperator
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsEqualityOperator
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 290
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is an equality operator (==).
  example: []
  syntax:
    content: public bool IsEqualityOperator { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsEqualityOperator As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsEqualityOperator*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInequalityOperator
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInequalityOperator
  id: IsInequalityOperator
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsInequalityOperator
  nameWithType: SyntaxTokenScopeHelper.IsInequalityOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInequalityOperator
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsInequalityOperator
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 293
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is an inequality operator (!=).
  example: []
  syntax:
    content: public bool IsInequalityOperator { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsInequalityOperator As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInequalityOperator*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLessThanEqualsOperator
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLessThanEqualsOperator
  id: IsLessThanEqualsOperator
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsLessThanEqualsOperator
  nameWithType: SyntaxTokenScopeHelper.IsLessThanEqualsOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLessThanEqualsOperator
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsLessThanEqualsOperator
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 296
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public bool IsLessThanEqualsOperator { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsLessThanEqualsOperator As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLessThanEqualsOperator*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsGreaterThanEqualsOperator
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsGreaterThanEqualsOperator
  id: IsGreaterThanEqualsOperator
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsGreaterThanEqualsOperator
  nameWithType: SyntaxTokenScopeHelper.IsGreaterThanEqualsOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsGreaterThanEqualsOperator
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsGreaterThanEqualsOperator
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 299
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a greater-than-or-equal operator (&gt;=).
  example: []
  syntax:
    content: public bool IsGreaterThanEqualsOperator { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsGreaterThanEqualsOperator As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsGreaterThanEqualsOperator*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLessThanOperator
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLessThanOperator
  id: IsLessThanOperator
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsLessThanOperator
  nameWithType: SyntaxTokenScopeHelper.IsLessThanOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLessThanOperator
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsLessThanOperator
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 302
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a less-than operator (&lt;).
  example: []
  syntax:
    content: public bool IsLessThanOperator { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsLessThanOperator As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLessThanOperator*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsGreaterThanOperator
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsGreaterThanOperator
  id: IsGreaterThanOperator
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsGreaterThanOperator
  nameWithType: SyntaxTokenScopeHelper.IsGreaterThanOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsGreaterThanOperator
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsGreaterThanOperator
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 305
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a greater-than operator (&gt;).
  example: []
  syntax:
    content: public bool IsGreaterThanOperator { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsGreaterThanOperator As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsGreaterThanOperator*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNegationOperator
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNegationOperator
  id: IsNegationOperator
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsNegationOperator
  nameWithType: SyntaxTokenScopeHelper.IsNegationOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNegationOperator
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsNegationOperator
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 308
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a negation operator (!).
  example: []
  syntax:
    content: public bool IsNegationOperator { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsNegationOperator As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNegationOperator*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsUnsignedRightShift
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsUnsignedRightShift
  id: IsUnsignedRightShift
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsUnsignedRightShift
  nameWithType: SyntaxTokenScopeHelper.IsUnsignedRightShift
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsUnsignedRightShift
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsUnsignedRightShift
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 311
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is an unsigned right shift operator (&gt;&gt;&gt;).
  example: []
  syntax:
    content: public bool IsUnsignedRightShift { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsUnsignedRightShift As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsUnsignedRightShift*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsUnsignedLeftShift
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsUnsignedLeftShift
  id: IsUnsignedLeftShift
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsUnsignedLeftShift
  nameWithType: SyntaxTokenScopeHelper.IsUnsignedLeftShift
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsUnsignedLeftShift
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsUnsignedLeftShift
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 314
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is an unsigned left shift operator (&lt;&lt;&lt;).
  example: []
  syntax:
    content: public bool IsUnsignedLeftShift { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsUnsignedLeftShift As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsUnsignedLeftShift*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLeftShift
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLeftShift
  id: IsLeftShift
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsLeftShift
  nameWithType: SyntaxTokenScopeHelper.IsLeftShift
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLeftShift
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsLeftShift
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 317
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a left shift operator (&lt;&lt;).
  example: []
  syntax:
    content: public bool IsLeftShift { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsLeftShift As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLeftShift*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsRightShift
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsRightShift
  id: IsRightShift
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsRightShift
  nameWithType: SyntaxTokenScopeHelper.IsRightShift
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsRightShift
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsRightShift
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 320
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a right shift operator (&gt;&gt;).
  example: []
  syntax:
    content: public bool IsRightShift { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsRightShift As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsRightShift*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAdditionOperator
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAdditionOperator
  id: IsAdditionOperator
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsAdditionOperator
  nameWithType: SyntaxTokenScopeHelper.IsAdditionOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAdditionOperator
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsAdditionOperator
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 323
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is an addition operator (+).
  example: []
  syntax:
    content: public bool IsAdditionOperator { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsAdditionOperator As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAdditionOperator*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSubtractionOperator
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSubtractionOperator
  id: IsSubtractionOperator
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsSubtractionOperator
  nameWithType: SyntaxTokenScopeHelper.IsSubtractionOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSubtractionOperator
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsSubtractionOperator
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 326
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a subtraction operator (-).
  example: []
  syntax:
    content: public bool IsSubtractionOperator { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsSubtractionOperator As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSubtractionOperator*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDivisionOperator
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDivisionOperator
  id: IsDivisionOperator
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsDivisionOperator
  nameWithType: SyntaxTokenScopeHelper.IsDivisionOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDivisionOperator
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsDivisionOperator
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 329
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a division operator (/).
  example: []
  syntax:
    content: public bool IsDivisionOperator { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsDivisionOperator As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDivisionOperator*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsMultiplicationOperator
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsMultiplicationOperator
  id: IsMultiplicationOperator
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsMultiplicationOperator
  nameWithType: SyntaxTokenScopeHelper.IsMultiplicationOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsMultiplicationOperator
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsMultiplicationOperator
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 332
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a multiplication operator (*).
  example: []
  syntax:
    content: public bool IsMultiplicationOperator { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsMultiplicationOperator As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsMultiplicationOperator*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExponentiationOperator
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExponentiationOperator
  id: IsExponentiationOperator
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsExponentiationOperator
  nameWithType: SyntaxTokenScopeHelper.IsExponentiationOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExponentiationOperator
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsExponentiationOperator
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 335
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is an exponentiation operator (**).
  example: []
  syntax:
    content: public bool IsExponentiationOperator { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsExponentiationOperator As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExponentiationOperator*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsModuloOperator
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsModuloOperator
  id: IsModuloOperator
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsModuloOperator
  nameWithType: SyntaxTokenScopeHelper.IsModuloOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsModuloOperator
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsModuloOperator
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 338
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a modulo operator (%).
  example: []
  syntax:
    content: public bool IsModuloOperator { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsModuloOperator As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsModuloOperator*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBitwiseAndOperator
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBitwiseAndOperator
  id: IsBitwiseAndOperator
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsBitwiseAndOperator
  nameWithType: SyntaxTokenScopeHelper.IsBitwiseAndOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBitwiseAndOperator
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsBitwiseAndOperator
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 341
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a bitwise AND operator (&amp;).
  example: []
  syntax:
    content: public bool IsBitwiseAndOperator { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsBitwiseAndOperator As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBitwiseAndOperator*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsHashOperator
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsHashOperator
  id: IsHashOperator
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsHashOperator
  nameWithType: SyntaxTokenScopeHelper.IsHashOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsHashOperator
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsHashOperator
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 344
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a hash operator (#).
  example: []
  syntax:
    content: public bool IsHashOperator { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsHashOperator As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsHashOperator*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsIncrementOperator
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsIncrementOperator
  id: IsIncrementOperator
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsIncrementOperator
  nameWithType: SyntaxTokenScopeHelper.IsIncrementOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsIncrementOperator
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsIncrementOperator
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 347
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is an increment operator (++) .
  example: []
  syntax:
    content: public bool IsIncrementOperator { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsIncrementOperator As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsIncrementOperator*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDecrementOperator
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDecrementOperator
  id: IsDecrementOperator
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsDecrementOperator
  nameWithType: SyntaxTokenScopeHelper.IsDecrementOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDecrementOperator
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsDecrementOperator
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 350
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a decrement operator (--).
  example: []
  syntax:
    content: public bool IsDecrementOperator { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsDecrementOperator As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDecrementOperator*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLogicalAndOperator
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLogicalAndOperator
  id: IsLogicalAndOperator
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsLogicalAndOperator
  nameWithType: SyntaxTokenScopeHelper.IsLogicalAndOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLogicalAndOperator
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsLogicalAndOperator
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 353
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public bool IsLogicalAndOperator { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsLogicalAndOperator As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLogicalAndOperator*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLogicalOrOperator
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLogicalOrOperator
  id: IsLogicalOrOperator
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsLogicalOrOperator
  nameWithType: SyntaxTokenScopeHelper.IsLogicalOrOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLogicalOrOperator
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsLogicalOrOperator
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 356
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a logical OR operator (||).
  example: []
  syntax:
    content: public bool IsLogicalOrOperator { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsLogicalOrOperator As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLogicalOrOperator*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsOptionalChaining
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsOptionalChaining
  id: IsOptionalChaining
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsOptionalChaining
  nameWithType: SyntaxTokenScopeHelper.IsOptionalChaining
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsOptionalChaining
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsOptionalChaining
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 359
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is an optional chaining operator (?.).
  example: []
  syntax:
    content: public bool IsOptionalChaining { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsOptionalChaining As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsOptionalChaining*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPipeOperator
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPipeOperator
  id: IsPipeOperator
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsPipeOperator
  nameWithType: SyntaxTokenScopeHelper.IsPipeOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPipeOperator
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsPipeOperator
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 362
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a pipe operator (|&gt;).
  example: []
  syntax:
    content: public bool IsPipeOperator { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsPipeOperator As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPipeOperator*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPipeInOperator
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPipeInOperator
  id: IsPipeInOperator
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsPipeInOperator
  nameWithType: SyntaxTokenScopeHelper.IsPipeInOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPipeInOperator
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsPipeInOperator
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 365
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a pipe-in operator (&lt;|).
  example: []
  syntax:
    content: public bool IsPipeInOperator { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsPipeInOperator As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPipeInOperator*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPipeOutOperator
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPipeOutOperator
  id: IsPipeOutOperator
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsPipeOutOperator
  nameWithType: SyntaxTokenScopeHelper.IsPipeOutOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPipeOutOperator
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsPipeOutOperator
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 368
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a pipe-out operator (|&gt;).
  example: []
  syntax:
    content: public bool IsPipeOutOperator { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsPipeOutOperator As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPipeOutOperator*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNullableCoalescence
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNullableCoalescence
  id: IsNullableCoalescence
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsNullableCoalescence
  nameWithType: SyntaxTokenScopeHelper.IsNullableCoalescence
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNullableCoalescence
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsNullableCoalescence
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 371
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a null-coalescence operator (??).
  example: []
  syntax:
    content: public bool IsNullableCoalescence { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsNullableCoalescence As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNullableCoalescence*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSpreadOperator
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSpreadOperator
  id: IsSpreadOperator
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsSpreadOperator
  nameWithType: SyntaxTokenScopeHelper.IsSpreadOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSpreadOperator
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsSpreadOperator
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 374
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a spread operator (...).
  example: []
  syntax:
    content: public bool IsSpreadOperator { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsSpreadOperator As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSpreadOperator*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSchematizeOperator
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSchematizeOperator
  id: IsSchematizeOperator
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsSchematizeOperator
  nameWithType: SyntaxTokenScopeHelper.IsSchematizeOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSchematizeOperator
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsSchematizeOperator
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 377
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a schematize operator (=&gt; for schemas, etc.).
  example: []
  syntax:
    content: public bool IsSchematizeOperator { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsSchematizeOperator As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSchematizeOperator*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAssignOperator
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAssignOperator
  id: IsAssignOperator
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsAssignOperator
  nameWithType: SyntaxTokenScopeHelper.IsAssignOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAssignOperator
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsAssignOperator
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 380
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is an assignment operator (=).
  example: []
  syntax:
    content: public bool IsAssignOperator { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsAssignOperator As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAssignOperator*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInlineReturn
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInlineReturn
  id: IsInlineReturn
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsInlineReturn
  nameWithType: SyntaxTokenScopeHelper.IsInlineReturn
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInlineReturn
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsInlineReturn
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 382
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  syntax:
    content: public bool IsInlineReturn { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsInlineReturn As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInlineReturn*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsComma
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsComma
  id: IsComma
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsComma
  nameWithType: SyntaxTokenScopeHelper.IsComma
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsComma
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsComma
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 387
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a comma (,).
  example: []
  syntax:
    content: public bool IsComma { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsComma As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsComma*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsKeyValueSeparator
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsKeyValueSeparator
  id: IsKeyValueSeparator
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsKeyValueSeparator
  nameWithType: SyntaxTokenScopeHelper.IsKeyValueSeparator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsKeyValueSeparator
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsKeyValueSeparator
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 390
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a key-value separator (e.g., colon ':').
  example: []
  syntax:
    content: public bool IsKeyValueSeparator { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsKeyValueSeparator As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsKeyValueSeparator*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsScopeSeparator
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsScopeSeparator
  id: IsScopeSeparator
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsScopeSeparator
  nameWithType: SyntaxTokenScopeHelper.IsScopeSeparator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsScopeSeparator
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsScopeSeparator
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 393
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a scope separator (e.g., dot '.').
  example: []
  syntax:
    content: public bool IsScopeSeparator { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsScopeSeparator As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsScopeSeparator*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsParentChildSeparator
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsParentChildSeparator
  id: IsParentChildSeparator
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsParentChildSeparator
  nameWithType: SyntaxTokenScopeHelper.IsParentChildSeparator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsParentChildSeparator
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsParentChildSeparator
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 396
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a parent-child separator (e.g., slash '/').
  example: []
  syntax:
    content: public bool IsParentChildSeparator { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsParentChildSeparator As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsParentChildSeparator*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSemicolon
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSemicolon
  id: IsSemicolon
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsSemicolon
  nameWithType: SyntaxTokenScopeHelper.IsSemicolon
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSemicolon
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsSemicolon
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 399
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a semicolon (;).
  example: []
  syntax:
    content: public bool IsSemicolon { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsSemicolon As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSemicolon*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrow
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrow
  id: IsArrow
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsArrow
  nameWithType: SyntaxTokenScopeHelper.IsArrow
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrow
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsArrow
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 402
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is an arrow (-&gt;).
  example: []
  syntax:
    content: public bool IsArrow { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsArrow As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrow*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArgumentName
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArgumentName
  id: IsArgumentName
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsArgumentName
  nameWithType: SyntaxTokenScopeHelper.IsArgumentName
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArgumentName
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsArgumentName
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 407
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is an argument name in a function or method declaration.
  example: []
  syntax:
    content: public bool IsArgumentName { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsArgumentName As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArgumentName*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsClassLabel
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsClassLabel
  id: IsClassLabel
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsClassLabel
  nameWithType: SyntaxTokenScopeHelper.IsClassLabel
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsClassLabel
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsClassLabel
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 412
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a class label.
  example: []
  syntax:
    content: public bool IsClassLabel { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsClassLabel As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsClassLabel*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsRecordLabel
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsRecordLabel
  id: IsRecordLabel
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsRecordLabel
  nameWithType: SyntaxTokenScopeHelper.IsRecordLabel
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsRecordLabel
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsRecordLabel
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 415
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a record label.
  example: []
  syntax:
    content: public bool IsRecordLabel { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsRecordLabel As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsRecordLabel*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsStructLabel
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsStructLabel
  id: IsStructLabel
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsStructLabel
  nameWithType: SyntaxTokenScopeHelper.IsStructLabel
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsStructLabel
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsStructLabel
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 418
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a struct label.
  example: []
  syntax:
    content: public bool IsStructLabel { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsStructLabel As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsStructLabel*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsEnumLabel
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsEnumLabel
  id: IsEnumLabel
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsEnumLabel
  nameWithType: SyntaxTokenScopeHelper.IsEnumLabel
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsEnumLabel
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsEnumLabel
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 421
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is an enum label.
  example: []
  syntax:
    content: public bool IsEnumLabel { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsEnumLabel As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsEnumLabel*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInterfaceLabel
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInterfaceLabel
  id: IsInterfaceLabel
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsInterfaceLabel
  nameWithType: SyntaxTokenScopeHelper.IsInterfaceLabel
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInterfaceLabel
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsInterfaceLabel
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 424
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is an interface label.
  example: []
  syntax:
    content: public bool IsInterfaceLabel { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsInterfaceLabel As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInterfaceLabel*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsActionLabel
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsActionLabel
  id: IsActionLabel
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsActionLabel
  nameWithType: SyntaxTokenScopeHelper.IsActionLabel
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsActionLabel
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsActionLabel
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 427
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is an action label (e.g., Ubytec action declaration).
  example: []
  syntax:
    content: public bool IsActionLabel { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsActionLabel As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsActionLabel*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFuncLabel
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFuncLabel
  id: IsFuncLabel
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsFuncLabel
  nameWithType: SyntaxTokenScopeHelper.IsFuncLabel
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFuncLabel
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsFuncLabel
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 430
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a function label.
  example: []
  syntax:
    content: public bool IsFuncLabel { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsFuncLabel As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFuncLabel*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsImplicitboolLabel
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsImplicitboolLabel
  id: IsImplicitboolLabel
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsImplicitboolLabel
  nameWithType: SyntaxTokenScopeHelper.IsImplicitboolLabel
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsImplicitboolLabel
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsImplicitboolLabel
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 433
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is an implicitly declared boolean variable label.
  example: []
  syntax:
    content: public bool IsImplicitboolLabel { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsImplicitboolLabel As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsImplicitboolLabel*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFieldLabel
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFieldLabel
  id: IsFieldLabel
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsFieldLabel
  nameWithType: SyntaxTokenScopeHelper.IsFieldLabel
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFieldLabel
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsFieldLabel
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 436
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is a field label.
  example: []
  syntax:
    content: public bool IsFieldLabel { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsFieldLabel As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFieldLabel*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExplicitboolLabel
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExplicitboolLabel
  id: IsExplicitboolLabel
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsExplicitboolLabel
  nameWithType: SyntaxTokenScopeHelper.IsExplicitboolLabel
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExplicitboolLabel
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsExplicitboolLabel
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 439
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is an explicitly declared boolean variable label.
  example: []
  syntax:
    content: public bool IsExplicitboolLabel { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsExplicitboolLabel As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExplicitboolLabel*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsImplicitVarLabel
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsImplicitVarLabel
  id: IsImplicitVarLabel
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsImplicitVarLabel
  nameWithType: SyntaxTokenScopeHelper.IsImplicitVarLabel
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsImplicitVarLabel
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsImplicitVarLabel
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 442
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is an implicitly declared variable label.
  example: []
  syntax:
    content: public bool IsImplicitVarLabel { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsImplicitVarLabel As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsImplicitVarLabel*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExplicitVarLabel
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExplicitVarLabel
  id: IsExplicitVarLabel
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsExplicitVarLabel
  nameWithType: SyntaxTokenScopeHelper.IsExplicitVarLabel
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExplicitVarLabel
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsExplicitVarLabel
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 444
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token is an explicitly declared variable label.
  example: []
  syntax:
    content: public bool IsExplicitVarLabel { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsExplicitVarLabel As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExplicitVarLabel*
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInvalid
  commentId: P:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInvalid
  id: IsInvalid
  parent: Ubytec.Language.Tools.SyntaxTokenScopeHelper
  langs:
  - csharp
  - vb
  name: IsInvalid
  nameWithType: SyntaxTokenScopeHelper.IsInvalid
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInvalid
  type: Property
  source:
    remote:
      path: Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
      branch: main
      repo: https://github.com/Universal-Byte-Code/ubytec-interpreter.git
    id: IsInvalid
    path: ../Ubytec/Language/Tools/SyntaxTokenScopeHelper.cs
    startLine: 449
  assemblies:
  - Ubytec
  namespace: Ubytec.Language.Tools
  summary: True if the token represents an illegal or invalid token.
  example: []
  syntax:
    content: public bool IsInvalid { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsInvalid As Boolean
  overload: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInvalid*
references:
- uid: Ubytec.Language.Syntax.Model.SyntaxToken
  commentId: T:Ubytec.Language.Syntax.Model.SyntaxToken
  parent: Ubytec.Language.Syntax.Model
  href: Ubytec.Language.Syntax.Model.SyntaxToken.html
  name: SyntaxToken
  nameWithType: SyntaxToken
  fullName: Ubytec.Language.Syntax.Model.SyntaxToken
- uid: Ubytec.Language.Tools
  commentId: N:Ubytec.Language.Tools
  href: Ubytec.html
  name: Ubytec.Language.Tools
  nameWithType: Ubytec.Language.Tools
  fullName: Ubytec.Language.Tools
  spec.csharp:
  - uid: Ubytec
    name: Ubytec
    href: Ubytec.html
  - name: .
  - uid: Ubytec.Language
    name: Language
    href: Ubytec.Language.html
  - name: .
  - uid: Ubytec.Language.Tools
    name: Tools
    href: Ubytec.Language.Tools.html
  spec.vb:
  - uid: Ubytec
    name: Ubytec
    href: Ubytec.html
  - name: .
  - uid: Ubytec.Language
    name: Language
    href: Ubytec.Language.html
  - name: .
  - uid: Ubytec.Language.Tools
    name: Tools
    href: Ubytec.Language.Tools.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: Ubytec.Language.Syntax.Model
  commentId: N:Ubytec.Language.Syntax.Model
  href: Ubytec.html
  name: Ubytec.Language.Syntax.Model
  nameWithType: Ubytec.Language.Syntax.Model
  fullName: Ubytec.Language.Syntax.Model
  spec.csharp:
  - uid: Ubytec
    name: Ubytec
    href: Ubytec.html
  - name: .
  - uid: Ubytec.Language
    name: Language
    href: Ubytec.Language.html
  - name: .
  - uid: Ubytec.Language.Syntax
    name: Syntax
    href: Ubytec.Language.Syntax.html
  - name: .
  - uid: Ubytec.Language.Syntax.Model
    name: Model
    href: Ubytec.Language.Syntax.Model.html
  spec.vb:
  - uid: Ubytec
    name: Ubytec
    href: Ubytec.html
  - name: .
  - uid: Ubytec.Language
    name: Language
    href: Ubytec.Language.html
  - name: .
  - uid: Ubytec.Language.Syntax
    name: Syntax
    href: Ubytec.Language.Syntax.html
  - name: .
  - uid: Ubytec.Language.Syntax.Model
    name: Model
    href: Ubytec.Language.Syntax.Model.html
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.#ctor*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.#ctor
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.-ctor.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper__ctor_Ubytec_Language_Syntax_Model_SyntaxToken_
  name: SyntaxTokenScopeHelper
  nameWithType: SyntaxTokenScopeHelper.SyntaxTokenScopeHelper
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.SyntaxTokenScopeHelper
  nameWithType.vb: SyntaxTokenScopeHelper.New
  fullName.vb: Ubytec.Language.Tools.SyntaxTokenScopeHelper.New
  name.vb: New
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsControl*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsControl
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsControl.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsControl_System_String_
  name: IsControl
  nameWithType: SyntaxTokenScopeHelper.IsControl
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsControl
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSource*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSource
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSource.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsSource
  name: IsSource
  nameWithType: SyntaxTokenScopeHelper.IsSource
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSource
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayNullableBoth*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayNullableBoth
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayNullableBoth.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsArrayNullableBoth
  name: IsArrayNullableBoth
  nameWithType: SyntaxTokenScopeHelper.IsArrayNullableBoth
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayNullableBoth
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayNullableArray*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayNullableArray
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayNullableArray.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsArrayNullableArray
  name: IsArrayNullableArray
  nameWithType: SyntaxTokenScopeHelper.IsArrayNullableArray
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayNullableArray
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayNullableItems*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayNullableItems
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayNullableItems.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsArrayNullableItems
  name: IsArrayNullableItems
  nameWithType: SyntaxTokenScopeHelper.IsArrayNullableItems
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayNullableItems
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSingleNullable*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSingleNullable
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSingleNullable.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsSingleNullable
  name: IsSingleNullable
  nameWithType: SyntaxTokenScopeHelper.IsSingleNullable
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSingleNullable
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSingle*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSingle
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSingle.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsSingle
  name: IsSingle
  nameWithType: SyntaxTokenScopeHelper.IsSingle
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSingle
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArray*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArray
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArray.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsArray
  name: IsArray
  nameWithType: SyntaxTokenScopeHelper.IsArray
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArray
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsCommentLineDoubleSlash*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsCommentLineDoubleSlash
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsCommentLineDoubleSlash.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsCommentLineDoubleSlash
  name: IsCommentLineDoubleSlash
  nameWithType: SyntaxTokenScopeHelper.IsCommentLineDoubleSlash
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsCommentLineDoubleSlash
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsCommentBlock*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsCommentBlock
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsCommentBlock.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsCommentBlock
  name: IsCommentBlock
  nameWithType: SyntaxTokenScopeHelper.IsCommentBlock
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsCommentBlock
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsModifier*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsModifier
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsModifier.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsModifier
  name: IsModifier
  nameWithType: SyntaxTokenScopeHelper.IsModifier
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsModifier
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsStorageType*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsStorageType
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsStorageType.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsStorageType
  name: IsStorageType
  nameWithType: SyntaxTokenScopeHelper.IsStorageType
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsStorageType
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBooleanConstant*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBooleanConstant
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBooleanConstant.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsBooleanConstant
  name: IsBooleanConstant
  nameWithType: SyntaxTokenScopeHelper.IsBooleanConstant
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBooleanConstant
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericFloat*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericFloat
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericFloat.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsNumericFloat
  name: IsNumericFloat
  nameWithType: SyntaxTokenScopeHelper.IsNumericFloat
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericFloat
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericDouble*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericDouble
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericDouble.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsNumericDouble
  name: IsNumericDouble
  nameWithType: SyntaxTokenScopeHelper.IsNumericDouble
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericDouble
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericInt*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericInt
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericInt.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsNumericInt
  name: IsNumericInt
  nameWithType: SyntaxTokenScopeHelper.IsNumericInt
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericInt
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericHex*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericHex
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericHex.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsNumericHex
  name: IsNumericHex
  nameWithType: SyntaxTokenScopeHelper.IsNumericHex
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericHex
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericBinary*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericBinary
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericBinary.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsNumericBinary
  name: IsNumericBinary
  nameWithType: SyntaxTokenScopeHelper.IsNumericBinary
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNumericBinary
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayStructure*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayStructure
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayStructure.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsArrayStructure
  name: IsArrayStructure
  nameWithType: SyntaxTokenScopeHelper.IsArrayStructure
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrayStructure
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsGroupingStructure*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsGroupingStructure
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsGroupingStructure.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsGroupingStructure
  name: IsGroupingStructure
  nameWithType: SyntaxTokenScopeHelper.IsGroupingStructure
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsGroupingStructure
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBlockStructure*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBlockStructure
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBlockStructure.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsBlockStructure
  name: IsBlockStructure
  nameWithType: SyntaxTokenScopeHelper.IsBlockStructure
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBlockStructure
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAngleGrouping*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAngleGrouping
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAngleGrouping.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsAngleGrouping
  name: IsAngleGrouping
  nameWithType: SyntaxTokenScopeHelper.IsAngleGrouping
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAngleGrouping
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDoubleQuotedString*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDoubleQuotedString
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDoubleQuotedString.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsDoubleQuotedString
  name: IsDoubleQuotedString
  nameWithType: SyntaxTokenScopeHelper.IsDoubleQuotedString
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDoubleQuotedString
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSingleQuotedString*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSingleQuotedString
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSingleQuotedString.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsSingleQuotedString
  name: IsSingleQuotedString
  nameWithType: SyntaxTokenScopeHelper.IsSingleQuotedString
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSingleQuotedString
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDeclarationKeyword*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDeclarationKeyword
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDeclarationKeyword.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsDeclarationKeyword
  name: IsDeclarationKeyword
  nameWithType: SyntaxTokenScopeHelper.IsDeclarationKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDeclarationKeyword
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsControlKeyword*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsControlKeyword
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsControlKeyword.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsControlKeyword
  name: IsControlKeyword
  nameWithType: SyntaxTokenScopeHelper.IsControlKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsControlKeyword
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFlowKeyword*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFlowKeyword
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFlowKeyword.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsFlowKeyword
  name: IsFlowKeyword
  nameWithType: SyntaxTokenScopeHelper.IsFlowKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFlowKeyword
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsboolKeyword*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsboolKeyword
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsboolKeyword.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsboolKeyword
  name: IsboolKeyword
  nameWithType: SyntaxTokenScopeHelper.IsboolKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsboolKeyword
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsStackKeyword*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsStackKeyword
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsStackKeyword.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsStackKeyword
  name: IsStackKeyword
  nameWithType: SyntaxTokenScopeHelper.IsStackKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsStackKeyword
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArithmeticKeyword*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArithmeticKeyword
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArithmeticKeyword.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsArithmeticKeyword
  name: IsArithmeticKeyword
  nameWithType: SyntaxTokenScopeHelper.IsArithmeticKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArithmeticKeyword
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBitwIseKeyword*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBitwIseKeyword
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBitwIseKeyword.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsBitwIseKeyword
  name: IsBitwIseKeyword
  nameWithType: SyntaxTokenScopeHelper.IsBitwIseKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBitwIseKeyword
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsComparIsonKeyword*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsComparIsonKeyword
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsComparIsonKeyword.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsComparIsonKeyword
  name: IsComparIsonKeyword
  nameWithType: SyntaxTokenScopeHelper.IsComparIsonKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsComparIsonKeyword
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsMemoryKeyword*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsMemoryKeyword
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsMemoryKeyword.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsMemoryKeyword
  name: IsMemoryKeyword
  nameWithType: SyntaxTokenScopeHelper.IsMemoryKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsMemoryKeyword
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsJumpKeyword*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsJumpKeyword
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsJumpKeyword.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsJumpKeyword
  name: IsJumpKeyword
  nameWithType: SyntaxTokenScopeHelper.IsJumpKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsJumpKeyword
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFuncCallKeyword*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFuncCallKeyword
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFuncCallKeyword.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsFuncCallKeyword
  name: IsFuncCallKeyword
  nameWithType: SyntaxTokenScopeHelper.IsFuncCallKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFuncCallKeyword
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSyscallKeyword*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSyscallKeyword
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSyscallKeyword.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsSyscallKeyword
  name: IsSyscallKeyword
  nameWithType: SyntaxTokenScopeHelper.IsSyscallKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSyscallKeyword
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsThreadingKeyword*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsThreadingKeyword
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsThreadingKeyword.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsThreadingKeyword
  name: IsThreadingKeyword
  nameWithType: SyntaxTokenScopeHelper.IsThreadingKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsThreadingKeyword
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSecurityKeyword*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSecurityKeyword
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSecurityKeyword.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsSecurityKeyword
  name: IsSecurityKeyword
  nameWithType: SyntaxTokenScopeHelper.IsSecurityKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSecurityKeyword
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExceptionKeyword*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExceptionKeyword
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExceptionKeyword.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsExceptionKeyword
  name: IsExceptionKeyword
  nameWithType: SyntaxTokenScopeHelper.IsExceptionKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExceptionKeyword
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsVectorKeyword*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsVectorKeyword
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsVectorKeyword.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsVectorKeyword
  name: IsVectorKeyword
  nameWithType: SyntaxTokenScopeHelper.IsVectorKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsVectorKeyword
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAudioKeyword*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAudioKeyword
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAudioKeyword.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsAudioKeyword
  name: IsAudioKeyword
  nameWithType: SyntaxTokenScopeHelper.IsAudioKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAudioKeyword
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSystemKeyword*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSystemKeyword
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSystemKeyword.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsSystemKeyword
  name: IsSystemKeyword
  nameWithType: SyntaxTokenScopeHelper.IsSystemKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSystemKeyword
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsMLKeyword*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsMLKeyword
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsMLKeyword.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsMLKeyword
  name: IsMLKeyword
  nameWithType: SyntaxTokenScopeHelper.IsMLKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsMLKeyword
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPowerKeyword*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPowerKeyword
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPowerKeyword.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsPowerKeyword
  name: IsPowerKeyword
  nameWithType: SyntaxTokenScopeHelper.IsPowerKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPowerKeyword
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsQuantumKeyword*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsQuantumKeyword
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsQuantumKeyword.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsQuantumKeyword
  name: IsQuantumKeyword
  nameWithType: SyntaxTokenScopeHelper.IsQuantumKeyword
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsQuantumKeyword
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsEqualityOperator*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsEqualityOperator
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsEqualityOperator.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsEqualityOperator
  name: IsEqualityOperator
  nameWithType: SyntaxTokenScopeHelper.IsEqualityOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsEqualityOperator
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInequalityOperator*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInequalityOperator
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInequalityOperator.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsInequalityOperator
  name: IsInequalityOperator
  nameWithType: SyntaxTokenScopeHelper.IsInequalityOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInequalityOperator
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLessThanEqualsOperator*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLessThanEqualsOperator
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLessThanEqualsOperator.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsLessThanEqualsOperator
  name: IsLessThanEqualsOperator
  nameWithType: SyntaxTokenScopeHelper.IsLessThanEqualsOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLessThanEqualsOperator
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsGreaterThanEqualsOperator*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsGreaterThanEqualsOperator
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsGreaterThanEqualsOperator.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsGreaterThanEqualsOperator
  name: IsGreaterThanEqualsOperator
  nameWithType: SyntaxTokenScopeHelper.IsGreaterThanEqualsOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsGreaterThanEqualsOperator
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLessThanOperator*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLessThanOperator
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLessThanOperator.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsLessThanOperator
  name: IsLessThanOperator
  nameWithType: SyntaxTokenScopeHelper.IsLessThanOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLessThanOperator
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsGreaterThanOperator*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsGreaterThanOperator
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsGreaterThanOperator.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsGreaterThanOperator
  name: IsGreaterThanOperator
  nameWithType: SyntaxTokenScopeHelper.IsGreaterThanOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsGreaterThanOperator
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNegationOperator*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNegationOperator
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNegationOperator.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsNegationOperator
  name: IsNegationOperator
  nameWithType: SyntaxTokenScopeHelper.IsNegationOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNegationOperator
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsUnsignedRightShift*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsUnsignedRightShift
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsUnsignedRightShift.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsUnsignedRightShift
  name: IsUnsignedRightShift
  nameWithType: SyntaxTokenScopeHelper.IsUnsignedRightShift
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsUnsignedRightShift
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsUnsignedLeftShift*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsUnsignedLeftShift
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsUnsignedLeftShift.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsUnsignedLeftShift
  name: IsUnsignedLeftShift
  nameWithType: SyntaxTokenScopeHelper.IsUnsignedLeftShift
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsUnsignedLeftShift
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLeftShift*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLeftShift
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLeftShift.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsLeftShift
  name: IsLeftShift
  nameWithType: SyntaxTokenScopeHelper.IsLeftShift
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLeftShift
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsRightShift*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsRightShift
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsRightShift.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsRightShift
  name: IsRightShift
  nameWithType: SyntaxTokenScopeHelper.IsRightShift
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsRightShift
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAdditionOperator*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAdditionOperator
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAdditionOperator.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsAdditionOperator
  name: IsAdditionOperator
  nameWithType: SyntaxTokenScopeHelper.IsAdditionOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAdditionOperator
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSubtractionOperator*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSubtractionOperator
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSubtractionOperator.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsSubtractionOperator
  name: IsSubtractionOperator
  nameWithType: SyntaxTokenScopeHelper.IsSubtractionOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSubtractionOperator
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDivisionOperator*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDivisionOperator
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDivisionOperator.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsDivisionOperator
  name: IsDivisionOperator
  nameWithType: SyntaxTokenScopeHelper.IsDivisionOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDivisionOperator
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsMultiplicationOperator*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsMultiplicationOperator
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsMultiplicationOperator.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsMultiplicationOperator
  name: IsMultiplicationOperator
  nameWithType: SyntaxTokenScopeHelper.IsMultiplicationOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsMultiplicationOperator
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExponentiationOperator*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExponentiationOperator
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExponentiationOperator.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsExponentiationOperator
  name: IsExponentiationOperator
  nameWithType: SyntaxTokenScopeHelper.IsExponentiationOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExponentiationOperator
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsModuloOperator*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsModuloOperator
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsModuloOperator.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsModuloOperator
  name: IsModuloOperator
  nameWithType: SyntaxTokenScopeHelper.IsModuloOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsModuloOperator
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBitwiseAndOperator*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBitwiseAndOperator
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBitwiseAndOperator.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsBitwiseAndOperator
  name: IsBitwiseAndOperator
  nameWithType: SyntaxTokenScopeHelper.IsBitwiseAndOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsBitwiseAndOperator
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsHashOperator*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsHashOperator
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsHashOperator.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsHashOperator
  name: IsHashOperator
  nameWithType: SyntaxTokenScopeHelper.IsHashOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsHashOperator
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsIncrementOperator*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsIncrementOperator
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsIncrementOperator.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsIncrementOperator
  name: IsIncrementOperator
  nameWithType: SyntaxTokenScopeHelper.IsIncrementOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsIncrementOperator
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDecrementOperator*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDecrementOperator
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDecrementOperator.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsDecrementOperator
  name: IsDecrementOperator
  nameWithType: SyntaxTokenScopeHelper.IsDecrementOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsDecrementOperator
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLogicalAndOperator*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLogicalAndOperator
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLogicalAndOperator.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsLogicalAndOperator
  name: IsLogicalAndOperator
  nameWithType: SyntaxTokenScopeHelper.IsLogicalAndOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLogicalAndOperator
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLogicalOrOperator*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLogicalOrOperator
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLogicalOrOperator.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsLogicalOrOperator
  name: IsLogicalOrOperator
  nameWithType: SyntaxTokenScopeHelper.IsLogicalOrOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsLogicalOrOperator
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsOptionalChaining*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsOptionalChaining
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsOptionalChaining.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsOptionalChaining
  name: IsOptionalChaining
  nameWithType: SyntaxTokenScopeHelper.IsOptionalChaining
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsOptionalChaining
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPipeOperator*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPipeOperator
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPipeOperator.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsPipeOperator
  name: IsPipeOperator
  nameWithType: SyntaxTokenScopeHelper.IsPipeOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPipeOperator
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPipeInOperator*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPipeInOperator
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPipeInOperator.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsPipeInOperator
  name: IsPipeInOperator
  nameWithType: SyntaxTokenScopeHelper.IsPipeInOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPipeInOperator
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPipeOutOperator*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPipeOutOperator
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPipeOutOperator.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsPipeOutOperator
  name: IsPipeOutOperator
  nameWithType: SyntaxTokenScopeHelper.IsPipeOutOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsPipeOutOperator
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNullableCoalescence*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNullableCoalescence
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNullableCoalescence.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsNullableCoalescence
  name: IsNullableCoalescence
  nameWithType: SyntaxTokenScopeHelper.IsNullableCoalescence
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsNullableCoalescence
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSpreadOperator*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSpreadOperator
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSpreadOperator.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsSpreadOperator
  name: IsSpreadOperator
  nameWithType: SyntaxTokenScopeHelper.IsSpreadOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSpreadOperator
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSchematizeOperator*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSchematizeOperator
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSchematizeOperator.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsSchematizeOperator
  name: IsSchematizeOperator
  nameWithType: SyntaxTokenScopeHelper.IsSchematizeOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSchematizeOperator
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAssignOperator*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAssignOperator
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAssignOperator.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsAssignOperator
  name: IsAssignOperator
  nameWithType: SyntaxTokenScopeHelper.IsAssignOperator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsAssignOperator
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInlineReturn*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInlineReturn
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInlineReturn.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsInlineReturn
  name: IsInlineReturn
  nameWithType: SyntaxTokenScopeHelper.IsInlineReturn
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInlineReturn
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsComma*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsComma
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsComma.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsComma
  name: IsComma
  nameWithType: SyntaxTokenScopeHelper.IsComma
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsComma
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsKeyValueSeparator*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsKeyValueSeparator
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsKeyValueSeparator.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsKeyValueSeparator
  name: IsKeyValueSeparator
  nameWithType: SyntaxTokenScopeHelper.IsKeyValueSeparator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsKeyValueSeparator
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsScopeSeparator*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsScopeSeparator
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsScopeSeparator.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsScopeSeparator
  name: IsScopeSeparator
  nameWithType: SyntaxTokenScopeHelper.IsScopeSeparator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsScopeSeparator
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsParentChildSeparator*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsParentChildSeparator
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsParentChildSeparator.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsParentChildSeparator
  name: IsParentChildSeparator
  nameWithType: SyntaxTokenScopeHelper.IsParentChildSeparator
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsParentChildSeparator
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSemicolon*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSemicolon
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSemicolon.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsSemicolon
  name: IsSemicolon
  nameWithType: SyntaxTokenScopeHelper.IsSemicolon
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsSemicolon
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrow*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrow
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrow.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsArrow
  name: IsArrow
  nameWithType: SyntaxTokenScopeHelper.IsArrow
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArrow
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArgumentName*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArgumentName
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArgumentName.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsArgumentName
  name: IsArgumentName
  nameWithType: SyntaxTokenScopeHelper.IsArgumentName
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsArgumentName
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsClassLabel*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsClassLabel
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsClassLabel.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsClassLabel
  name: IsClassLabel
  nameWithType: SyntaxTokenScopeHelper.IsClassLabel
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsClassLabel
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsRecordLabel*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsRecordLabel
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsRecordLabel.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsRecordLabel
  name: IsRecordLabel
  nameWithType: SyntaxTokenScopeHelper.IsRecordLabel
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsRecordLabel
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsStructLabel*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsStructLabel
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsStructLabel.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsStructLabel
  name: IsStructLabel
  nameWithType: SyntaxTokenScopeHelper.IsStructLabel
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsStructLabel
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsEnumLabel*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsEnumLabel
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsEnumLabel.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsEnumLabel
  name: IsEnumLabel
  nameWithType: SyntaxTokenScopeHelper.IsEnumLabel
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsEnumLabel
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInterfaceLabel*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInterfaceLabel
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInterfaceLabel.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsInterfaceLabel
  name: IsInterfaceLabel
  nameWithType: SyntaxTokenScopeHelper.IsInterfaceLabel
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInterfaceLabel
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsActionLabel*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsActionLabel
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsActionLabel.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsActionLabel
  name: IsActionLabel
  nameWithType: SyntaxTokenScopeHelper.IsActionLabel
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsActionLabel
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFuncLabel*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFuncLabel
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFuncLabel.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsFuncLabel
  name: IsFuncLabel
  nameWithType: SyntaxTokenScopeHelper.IsFuncLabel
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFuncLabel
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsImplicitboolLabel*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsImplicitboolLabel
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsImplicitboolLabel.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsImplicitboolLabel
  name: IsImplicitboolLabel
  nameWithType: SyntaxTokenScopeHelper.IsImplicitboolLabel
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsImplicitboolLabel
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFieldLabel*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFieldLabel
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFieldLabel.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsFieldLabel
  name: IsFieldLabel
  nameWithType: SyntaxTokenScopeHelper.IsFieldLabel
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsFieldLabel
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExplicitboolLabel*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExplicitboolLabel
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExplicitboolLabel.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsExplicitboolLabel
  name: IsExplicitboolLabel
  nameWithType: SyntaxTokenScopeHelper.IsExplicitboolLabel
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExplicitboolLabel
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsImplicitVarLabel*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsImplicitVarLabel
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsImplicitVarLabel.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsImplicitVarLabel
  name: IsImplicitVarLabel
  nameWithType: SyntaxTokenScopeHelper.IsImplicitVarLabel
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsImplicitVarLabel
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExplicitVarLabel*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExplicitVarLabel
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExplicitVarLabel.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsExplicitVarLabel
  name: IsExplicitVarLabel
  nameWithType: SyntaxTokenScopeHelper.IsExplicitVarLabel
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsExplicitVarLabel
- uid: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInvalid*
  commentId: Overload:Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInvalid
  href: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInvalid.html#Ubytec_Language_Tools_SyntaxTokenScopeHelper_IsInvalid
  name: IsInvalid
  nameWithType: SyntaxTokenScopeHelper.IsInvalid
  fullName: Ubytec.Language.Tools.SyntaxTokenScopeHelper.IsInvalid
memberLayout: SeparatePages
